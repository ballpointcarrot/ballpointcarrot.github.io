<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ballpointcarrot.net</title>
    <link>/</link>
    <description>Orange, and goes 'click, click.'</description>
    <atom:link href="posts/well-i-shouldve-been/feed.xml" rel="self" type="application/rss+xml" />
    
    
      <item>
        <title>Exploring Nixos</title>
        <description><![CDATA[<p>Late-ish last year (around November, if memory serves), I read about a new OS project which 
allowed its users a stark departure from traditional Linux methods. Called <a href="http://nixos.org">Nixos</a>, 
the unique claim that it brought to the table was that the system configuration was managed declaratively, through
functional configuration files. This includes things like package management, services executed, and user configuration.</p>
<p>To fit along with my foray into the world of functional programming (my <a href="/posts/rust-non-systems-programmer">jumps</a> into <a href="/posts/rust-nsp-matchers">Rust</a>
starting a mental shift, and recent dives into <a href="http://clojure.org/">Clojure</a> sealing the deal), I wanted to give it a shot. There were
a couple of strong draws for me:</p>
<ul>
<li>Defining a configuration for everything leads me to be able to port my configs from place to place</li>
<li>The comfort to screw up; that is, the ability to roll back in case things got weird</li>
<li>A new learning experience - it&#39;s been a long time since I&#39;ve installed something new just to give it a shot.</li>
</ul>
<p>I finally made the jump around mid-December, so I&#39;ve been on it on my laptop for about a month and a half. Not constantly, but enough
that I could make the configuration my own, and start to find out where things have been good, and what still needs to improve (both
my understanding of Nixos and in the system).</p>
<h2>Packaging and Installation</h2><p>Nixos provides an ISO from their website, as is often the case with linux distros. The only qualm that I had in this stage is that,
because I wanted to do a <a href="https://nixos.org/wiki/Installing_NixOS_from_a_USB_stick">UEFI installation via USB</a>, I had to jump through a 
few extra hoops in order to get things working correctly. This is less of a problem with Nixos specifically, and more endemic to the 
linux community as a whole - we need to make UEFI boot media easier to create. I miss the days of <code>dd if=&lt;iso&gt; of=&lt;flash-drive&gt;</code>. :)</p>
<p>I was pleasantly surprised to see that you could boot into a graphical environment using the boot media. This is something that some
<a href="https://www.archlinux.org/">major distributions</a> still seem to miss, and I was impressed to see a relatively young distro include a UI, 
even if it didn&#39;t handle the installation that way. At the very least, it gives you a sense of &quot;try before you buy.&quot;</p>
<p>The initial read-through of the <a href="http://nixos.org/nixos/manual/index.html#sec-installation">Nixos Manual</a> were useful, but sparse in places where more
information (particularly for a new user) would have been helpful. As you can see, the first 9 steps are pretty straightforward - hard disk setup, loading
options for runtime, etc. </p>
<p><em>Then there&#39;s step 10.</em></p>
<p>&quot;Edit this file&quot; has a lot of openness to it. They do give you some resources around here (links to detailed configuration docs, a 
very barebones initial config, and links to &quot;real-world installations&quot; to compare to), but as your first foray into the format
of the configuration.nix file, I would have <strong>loved</strong> a &quot;guided tour&quot; here, giving insight into why the file structure is how it is,
common configuration options for particular installation types, and a more &quot;this is a normal base installation&quot; config instead of the bare
config provided in the manual. </p>
<p>In my mind, this is where <em>the magic</em> of Nixos happens - the documentation should highlight the magic,
calling out its importance and showcasing how the features work. Imagine my surprise (and delight!) when I found I could enable xorg with a single line:</p>
<pre><code class="language-plain">services.xserver.displayManager.sddm.enable = true;
</code></pre>
<p>Having fast, impacting implementations of large swaths of software fed through because a single option was enabled? Again, that&#39;s <em>magic</em>, and that&#39;s what needs advertised here.</p>
<p>Other first-order-of-business options for me at installation are things like:</p>
<ul>
<li>Adjusting the keyboard layout (Dvorak)</li>
<li>Setting timezone and verifying current time (with optional NTP)</li>
<li>laptop configuration (thinkpad module, touchpad config)</li>
</ul>
<p>These were all fairly easy to find though the nixos wiki - when you&#39;ve had other users run into the same configurations, 
it&#39;s always nice to have them easy to find.</p>
<p>The rest of the installation was a breeze - you run nixos-install, set your root password at the end, and then reboot into your new OS.</p>
<h2>Using it</h2><p>Now I had a base working system, and it only took me a few generations of building and rebooting. After about generation 6-7 or so, I had
things down to where I liked them for a start. From here, it was time to dig into what I could do with it.</p>
<h3>Getting comfortable...</h3><p>My laptop is used for a couple of things:</p>
<ul>
<li>Internet browsing</li>
<li>Programming projects</li>
<li>Photo editing</li>
</ul>
<p>Setting up to get these tasks done wasn&#39;t terribly hard. However, a <em>Really Cool Thingâ„¢</em> about Nixos is that you can do these <em>per user</em>.</p>
<p>Let me reiterate that:</p>
<blockquote>
<p><em>Package installation can be done at the per-user level!</em></p>
</blockquote>
<p>That&#39;s huge in my mind, for multiple reasons. First, I&#39;m sure I&#39;m not the only one who will end up using this laptop. In the event that I need to <em>share</em>, this gives me a way to keep my configuration and structure completely isolated from another users, where I can have only the things I want installed for me. In addition, I don&#39;t have to muck about with installing everything system-wide, so I don&#39;t have to use the shared folders (and <code>sudo</code> calls everywhere) to do it. Finally, I like to configure tools in ways that could be confusing to others. This way, I can not only have the tool&#39;s configuration, but <em>the tool itself</em> in my user account.</p>
<p>In an effort to unite the ability to do this with the Nixos &quot;declarative by nature&quot; package management, <code>nix-env</code> was born:</p>
<pre><code class="language-plain">$ nix-env -qaP nitrogen       # a package for setting wallpapers for non-standard WMs.
nixos.nitrogen        nitrogen-1.5.2
nixos-15.09.nitrogen  nitrogen-1.5.2

$ nix-env -i nitrogen         # to install
</code></pre>
<p>The end result is that the package has been added to the user environment, and a reference to the package has been added to the user manifest inside of their Nix profile. As an odd side-effect of how nix packages are stored, take a look at my system $PATH variable:</p>
<pre><code class="language-plain">$ echo $PATH 
/home/ckruse/bin:/var/setuid-wrappers:/home/ckruse/.nix-profile/bin:/home/ckruse/.nix-profile/sbin:/home/ckruse/.nix-profile/lib/kde4/libexec:/nix/var/nix/profiles/default/bin:/nix/var/nix/profiles/default/sbin:/nix/var/nix/profiles/default/lib/kde4/libexec:/run/current-system/sw/bin:/run/current-system/sw/sbin:/run/current-system/sw/lib/kde4/libexec
</code></pre>
<p>Looking through that, you&#39;ll see the conspicuous absence of our friends in <code>/bin</code>, <code>/usr/bin</code>, and <code>/usr/local/bin</code>. These directories aren&#39;t used - instead, packages get built in their own compartmentalized sections, and then are symlinked into the running context (system-wide, at <code>/run/current-system/sw/bin</code>, and for each user, at <code>/home/&lt;user&gt;/.nix-profile/bin</code>). This is awesome for generating your environments while in the nix context, but it can have some troubles.</p>
<h3>...and uncomfortable</h3><p>About 2 weeks ago, I wanted to sit down and create this very blog post, detailing the experiences that I had with migrating things over. I mentioned this <a href="/posts/yearly-refresh-time">in the past</a>, but my blog posts are generated code based on Harp, a NodeJS static site generator.</p>
<p>In the past, I used to manage my node installations with the wonderful <a href="https://github.com/creationix/nvm">nvm</a> version manager, a set of shell scripts which shim versions of node to be used. However, this spectacularly failed with my Nixos installation. Versions of node installed via nvm did not have access to runtime libs that they would need, and so proper symlinking and running of these node versions failed, and failed hard.</p>
<p>While stuck with this problem, I realized I could settle for using the system-provided Node version. However, this led to its own problems, because now we have two separate package managers (nix and npm). There is <a href="http://blog.lastlog.de/posts/nodejs_on_nixos_status/">a push</a> to incorporate npm packages into nix using the npm2nix utility, but I feel that, especially given separate development projects have their own dependency manifests, this is a step in the wrong direction.</p>
<p>As a separate method to approach this problem, I read up on <a href="">creating separate script profiles</a> for running your development projects in. I thought, &quot;Great! I&#39;ll spin this up with the system node.js, install harp, and run with it.&quot; Unfortunately, the harp install fell through, because I didn&#39;t have write access to the global install directory for node (as I shouldn&#39;t, because then the implementation leaks out into the package build). </p>
<p>For now, I&#39;m using a separate dev host + ssh to update here. I&#39;ll want to dig into this further to see if I can get a good solution figured out. As of now, I know that <code>npm install -g &lt;whatever&gt;</code> isn&#39;t a good idea. Now I either find a better way (Docker could be a fun insert here), I change the blog backend again, or I wipe and start with a fresh installation of &quot;new distro ++&quot;.</p>
]]></description>
        <pubDate>Sat Jan 30 2016 01:32:33 GMT-0800 (PST)</pubDate>
        <link>/posts/exploring-nixos</link>
        <guid isPermaLink="true">/posts/exploring-nixos</guid>
      </item>
    
    
      <item>
        <title>I'm Still Here / Careless Copying</title>
        <description><![CDATA[<p>I&#39;ve identified that a considerable time has gone by since the last update. I&#39;m going to put some adequate time into resolving that this month and into the future. I&#39;ve been sitting on a couple of topics that I want to dig into (regarding how I handle <a href="http://notmuchmail.org">email</a> and some work I&#39;ve been doing with <a href="http://clojure.org">Clojure</a>).</p>
<p>In the interim, I&#39;ll leave you with a little anecdote/tale of caution.</p>
<hr>
<p>My wife and I (oh yeah, by the way, I got married in April. I really need to work on updates.) frequently play video games together to pass the time. I&#39;m not normally terribly competitive, and she&#39;s not into the traditional multiplayer model of games, so I try to look for games we can play that are multiplayer co-op, or more turn-based (I&#39;ve gotten us both hopelessly addicted to <a href="http://www.civilization.com/">Civilization</a>).</p>
<p>Recently, with a lapse in new ideas for games, we bought her a copy of <a href="http://store.steampowered.com/sub/32848/">Borderlands 2 on Steam</a> so that we could play through the storyline together. I had played shortly after it came out, and with friends both in the Midwest and in the PNW, so I had a number of game saves on my desktop.</p>
<p><em>Complication #1</em>: When we play games, normally Jordan gets the desktop, so that she has a better experience with the game. Having already played it, I get relegated to my laptop (running integrated Intel graphics) when I play along.</p>
<p><em>Complication #2</em>:  The group that did the porting of the game to Linux (<a href="http://www.aspyr.com/">Aspyr Media</a>, who should get amazing credit for their work in extending video games to the Linux world) does not allow for Steam Cloud saves to cross platforms. As such, I had no access to the work I&#39;ve put into the game previously.</p>
<hr>
<p>We come to the events of tonight.</p>
<p>Jordan is away on a work trip, and Christopher is home alone. Christopher decides, &quot;Hey, it&#39;s been forever since I&#39;ve actually gotten to use my desktop for games, and I&#39;ve been playing BL2 recently; let&#39;s play that.&quot;</p>
<p>An hour passes as Christopher enjoys playing one of his old characters, which is close in level to where he&#39;s at with Jordan.</p>
<p>Christopher: &quot;Hey - I should see if I can copy over the character data to the laptop, so I have the option to play with those characters when Jordan gets back.&quot;</p>
<p>After researching, Christopher finds that the character data is saved in files called <code>save&lt;nnnn&gt;.sav</code>. Easy enough to copy from one location to the next.</p>
<p>Christopher copies the save data to a shared filesystem so he can access it on his laptop, and then fires off the following command:</p>
<pre><code class="language-bash">cp save*.sav ~/.local/share/aspyr-media/borderlands 2/willowgame/savedata/&lt;numerical id&gt;/
</code></pre>
<p>After thinking about this, Christopher realizes in horror that <em>he&#39;s just saved over his character data he&#39;s been playing with his wife for the majority of the last week</em>.</p>
<p>Because the <code>cp</code> command doesn&#39;t default the <code>-i/--interactive</code> option, which would prompt on overwrite, it is easy to fall into this trap. In my case, both game saves were named &quot;save0001.sav&quot;, and the <code>cp</code> call replaced my character data with the old one.</p>
<p>I scoured the Internet for methods of data recovery (there&#39;s a <a href="http://superuser.com/questions/211301/recovery-of-overwritten-file">really</a> <a href="http://unix.stackexchange.com/a/150423">cool</a> <a href="http://unix.stackexchange.com/questions/101237/how-to-recover-files-i-deleted-now-by-running-rm">tangent</a> to take here on how mv/rm/cp actually behave), and most things I found referred to using text contained in the file to find the details. That&#39;d be great, but the data files for those characters are <a href="http://gaming.stackexchange.com/a/84732">encrypted</a>.</p>
<p>Fortunately (for me), this story has a happy ending. Borderlands 2 has support for <a href="https://en.wikipedia.org/wiki/Steam_%28software%29#cite_ref-39">Steam Cloud</a>. As a last-ditch effort, I removed <em>all</em> save data from the folder on the laptop, and restarted the game. Upon loading, it detected a game save within Steam Cloud that didn&#39;t exist locally, and happily copied that save down to the local machine. I&#39;m even more pleased to say that it was a recent save to, so I didn&#39;t lose my place!</p>
<hr>
<p>So, the moral of today&#39;s story: make sure you use (or better yet, alias) cp to <code>cp -i</code>, so that when you write to a directory, you pause before overwriting.</p>
]]></description>
        <pubDate>Sat Jan 30 2016 01:32:33 GMT-0800 (PST)</pubDate>
        <link>/posts/im-still-here</link>
        <guid isPermaLink="true">/posts/im-still-here</guid>
      </item>
    
    
      <item>
        <title>Rust (part 2 of n): 'match' and Tuples</title>
        <description><![CDATA[<p>In order to keep practicing and make sure I keep sharp on what I&#39;m learning, I like to dig through problem sets and write solutions for them. At first, the best resource for these was <a href="https://projecteuler.net">Project Euler</a>, but as time went on, new projects came about that presented problems in slightly different ways:</p>
<ul>
<li><a href="http://codewars.com">Codewars</a> gamifies the process a bit, by rating the difficulty of each item; those determine the amount of credit you get by solving them.</li>
<li><a href="http://codekata.com">CodeKata</a>, which is more of an exercise in repeated solutions to common problems, with the understanding that the repeated practice, you become better over time</li>
</ul>
<p>Most recently, I&#39;ve been running through problems on Reddit&#39;s <a href="http://reddit.com/r/dailyprogrammer">DailyProgrammer</a> subreddit. These are community-submitted challenges, separated into easy, medium, and difficult problems. Each of these problems can extend within themselves to offer more flexibility or allow the user more options.</p>
<p>Today, I had the opportunity to work on the <a href="http://www.reddit.com/r/dailyprogrammer/comments/2ygsxs/20150309_challenge_205_easy_friendly_date_ranges/">most recent &#39;easy&#39; DailyProgrammer challenge</a>. In it, when provided two separate dates, you need to make a pretty printout of the range between them. For example:</p>
<pre><code class="language-plaintext">2015-03-14, 2015-03-15 =&gt; March 14th - 15th
2015-03-14, 2016-02-28 =&gt; March 14th - February 28th
2015-03-14, 2016-03-15 =&gt; March 14th, 2015 - March 15th, 2016
</code></pre>
<p>Within the set values, you&#39;ll notice that years can be omitted when they match the current year, but only within a year&#39;s time. In addition, within a single month, you don&#39;t need to print out the month twice (the value is inferred).</p>
<h3>Rust: &#39;match&#39;</h3><p>During my solution to this problem, I had two problems to solve:</p>
<ul>
<li>How do I handle the ordinal values (1st, 2nd, 3rd, etc.) for the dates?</li>
<li>How do I compare the dates from the original strings to determine the output?</li>
</ul>
<p>For both, Rust has some strong utilities for helping with the solution. To solve the ordinal issue, rust provides a &#39;match&#39; keyword, which acts as a more flexible form of most languages&#39; switch/case statements. Within it, we can set matching values, or matching ranges of values, in order to retrieve what we&#39;re looking for.</p>
<p>In this case, we need 1st, 2nd, and 3rd to be unique, and 4 -&gt; 20 to use &#39;th&#39; (think about it... 11th, 12th, ...). However, we then reach 21, and that ends up using an &#39;st&#39; again. Since our problem only concerns itself with days of a month, we can limit ourselves to an upper bound of 31, as the example below shows:</p>
<pre><code class="language-rust">fn ordinal(value: usize) -&gt; Option&lt;String&gt; {
    match value {
        0 =&gt; Some(String::from_str(&quot;th&quot;)),
        1 =&gt; Some(String::from_str(&quot;st&quot;)),
        2 =&gt; Some(String::from_str(&quot;nd&quot;)),
        3 =&gt; Some(String::from_str(&quot;rd&quot;)),
        4...20 =&gt; Some(String::from_str(&quot;th&quot;)),
        21...31 =&gt; ordinal(value % 10),
        _ =&gt; None
    }
}
</code></pre>
<p>Some things to point out from the example:</p>
<ul>
<li>the fifth matcher uses a range from 4 to 20 inclusive, and will respond with a &#39;th&#39;. This satisfies the requirement for the teens.</li>
<li>the sixth matcher removes the tens place from the value, and recurses. when it responds, it will have the matcher for just that last place, which fulfilles the rule of 21, 22, etc.</li>
<li>the last matcher is a <em>catch-all</em> or <em>don&#39;t-care</em> matcher; as we are unconcerned with the value, we just handle the case without the value. This will become more important in the next section.</li>
</ul>
<p>Another point of note here is that the function is returning an Option value - as discussed <a href="/posts/rust-non-systems-programmer">in the last post</a>, an Option value is used in situations where you are uncertain about the resultant value, in order to avoid a situation where <code>null</code> would traditionally be used. Finally, the function does not have an explicit <code>return</code> keyword, because the match is acting as an expression and not a statement. By omitting the semicolon, the selected match logic is returned on its own.</p>
<h3>Rust: Tuples</h3><p>Now that we have the ordinal solved, we can go about formatting the actual output. In order to do so, we need to compare the values of the dates to find the differences between them (less than a month, less than a year, more than a year, etc.). In order to solve this, I arranged the date properties into a <em>tuple</em> - a structure with multiple data points within it.</p>
<pre><code class="language-rust">let (start_yr, start_mo, start_dy) = start_values[0], start_values[1], start_values[2];
</code></pre>
<p>Tuples in Rust can be used in many ways; often, they&#39;re used to provide multiple values as a return of a function, or to store data that is paired or grouped together (like (x,y) coordinates).</p>
<p>My limited example above is referred to as a <em>destructuring</em> of a tuple - it allows creation of multiple variables from the tuple they were defined from. In other words, I can now use <code>start_yr</code> and <code>start_mo</code> in my code in other spots.</p>
<p>This example doesn&#39;t show much of the power of what is being done, but watch what happens when you pair it with the <code>match</code> statement from above:</p>
<pre><code class="language-rust">match (end_yr-start_yr, (end_mo as isize)-(start_mo as isize), (end_dy as isize)-(start_dy as isize)) {
    (0, 0, 0) =&gt; format!(&quot;{} {}&quot;,
                         MONTHS[start_mo-1],
                         print_ordinal(start_dy)),
    (0, 0, _) =&gt; format!(&quot;{} {} - {}&quot;,
                         MONTHS[start_mo-1],
                         print_ordinal(start_dy),
                         print_ordinal(end_dy)),
    (0, _, _) =&gt; format!(&quot;{} {} - {} {}&quot;,
                         MONTHS[start_mo-1],
                         print_ordinal(start_dy),
                         MONTHS[end_mo-1],
                         print_ordinal(end_dy)
</code></pre>
<p>Here, we generate a tuple that acts as the difference between the year, month, and day values. Given the assumption that our ranges move forward in time, we present three cases:</p>
<ul>
<li>The start and end days are the same. In this case, just print the month and day (you don&#39;t need to print the end day, as it&#39;s the same).</li>
<li>The difference of the start and end month and year are both zero. In this case, we&#39;re within the same month, so we don&#39;t need to print it twice. Instead, we print the range between the start and end day.</li>
<li>The year is the same, but we have two different months. In this case, print both months and days.</li>
</ul>
<p>Notice that we don&#39;t care about what values we have in the month and day. In a situation where we <em>need</em> that calculation, we can assign variables to it, as well:</p>
<pre><code class="language-rust">    (1, month, day) =&gt; {
        let use_yr = match (0.cmp(&amp;month) , 0.cmp(&amp;day)) {
            (Ordering::Greater, _) =&gt; false,
            (Ordering::Equal, Ordering::Greater) =&gt; false,
            (_,_) =&gt; true
        };
        if use_yr {
            format!(&quot;{} {}, {} - {} {}, {}&quot;,
                    MONTHS[start_mo-1],
                    print_ordinal(start_dy),
                    start_yr,
                    MONTHS[end_mo-1],
                    print_ordinal(end_dy),
                    end_yr)
        } else {
            format!(&quot;{} {} - {} {}&quot;,
                    MONTHS[start_mo-1],
                    print_ordinal(start_dy),
                    MONTHS[end_mo-1],
                    print_ordinal(end_dy))
        }
    }
</code></pre>
<p>Here, we need to know the difference between month and day, as the year changed. However, if the month difference is less than zero (eg: from 2015-12-01 to 2016-03-01), then the year is assumed to be changing, and not printed. By extension, we will do the same with the date (eg: 2015-12-31 -&gt; 2016-12-25).</p>
<p>We capture those differences from the matcher in the month and day variables, and then use those to make further determinations in the matcher&#39;s block. First, we figure out if we are using the year, based on the conditions above. Then, we choose a format for the date based on if we&#39;re using the year.</p>
<h3>Testing</h3><p>Rust includes a strong preprocessor, which will examine and selectively compile parts of your code. Based on this, you can keep your unit tests contained within your source file, and they will only be compiled when you run in a test configuration (usually using &#39;cargo test&#39;).</p>
<p>You can find the crate for my solution <a href="https://github.com/ballpointcarrot/rust-dailyprogrammer/tree/205">on my github repository</a>. Note that there are different branches - I&#39;ll hopefully add more solutions to new branches for each problem that&#39;s solved.</p>
]]></description>
        <pubDate>Sat Jan 30 2016 01:32:33 GMT-0800 (PST)</pubDate>
        <link>/posts/rust-nsp-matchers</link>
        <guid isPermaLink="true">/posts/rust-nsp-matchers</guid>
      </item>
    
    
      <item>
        <title>Rust, by a non-systems programmer (Part 1 of n)</title>
        <description><![CDATA[<p>I&#39;ve been working on trying to teach myself Rust for the past 4 months or so. It&#39;s been slow-going, because I&#39;m having to
teach myself things that would have been common knowledge for anyone with previous experience doing systems-level programming
in C or C++. Instead, this will be more or less of a brain dump of a rubyist that is picking up some systems-level knowledge.</p>
<h2>String I/O</h2><p>Coming from a scripting language like Ruby, basic string input and output is fairly straightforward:</p>
<pre><code class="language-ruby">puts &quot;How old are you?&quot;
age = gets.strip
puts &quot;You&#39;ve said #{age} years, which is #{(age.to_i*365.25).to_i} days.&quot;
</code></pre>
<p>In Rust, this becomes significantly more involved:</p>
<pre><code class="language-rust">#![feature(old_io)]
use std::old_io::stdin;
use std::str::FromStr;

fn main() {
    println!(&quot;How old are you?&quot;);
    let mut input = match stdin().read_line() {
        Ok(v) =&gt; v,
        Err(_) =&gt; panic!(&quot;Couldn&#39;t get STDIN!&quot;)
    };
    input = input.trim()
    let age_days:usize = match FromStr::from_str(input.trim()) {
        Ok(v) =&gt; (v * 365.25) as usize,
        Err(_) =&gt; panic!(&quot;Couldn&#39;t convert to usize!&quot;)
    };

    println!(&quot;You&#39;ve said {} years, which is {} days&quot;, input.trim(), age_days)
}
</code></pre>
<p>In Rust, the placement of the variable in stack or heap memory is important to the Rust compiler&#39;s understanding of</p>
<ul>
<li>how long the variable lives (it&#39;s &quot;lifetime&quot;), and</li>
<li>who owns the memory that the variable uses (the &quot;ownership&quot;).</li>
</ul>
<p>There are <a href="https://doc.rust-lang.org/book/ownership.html">plenty</a> 
<a href="http://rustbyexample.com/move.html">of</a> 
<a href="https://doc.rust-lang.org/book/strings.html">posts</a>
<a href="http://nercury.github.io/rust/guide/2015/01/19/ownership.html">available</a>
which will explain these terms to enough detail; for practical purposes, we have to manage two separate types of strings. 
Each type gets used in subtly different ways, but will cause you some problems when building out programs. </p>
<p>The more commonly used string type is <code>&amp;str</code>, also known as the &quot;string slice&quot;. This string is allocated to the stack, and
is accessed through a reference to the stored string, much like a C-like character array.</p>
<p>The second string type, <code>String</code>, is used when you want to maintain ownership over the string value. <code>String</code>s are allocated on the heap, and
are &quot;growable&quot; - that is, they can be added to as mutable variables. </p>
<p>Be careful to understand what type of string you&#39;ll be dealing with; functions generally operate on the more general <code>&amp;str</code> type,
so you may need to convert back and forth between the two types with <code>String::as\_slice</code> or <code>&quot;&quot;.to\_string()</code>.</p>
<h3>Handling input possibilities</h3><p>Because Rust does not have a built-in concept of &quot;null&quot;, you cannot assign a non-guaranteed value to a variable. Instead,
Rust provides the Result type, which wraps the successful value in an <code>Ok()</code>-wrapped response; otherwise, an error will be 
provided with the relevant error details. </p>
<p>This means that reads from <code>STDIN</code> will be quite a bit more verbose than you&#39;re used to,
but the compiler now forces the checking of invalid situations for a value, which can take more off of your mind.</p>
<h3>Changing I/O Library</h3><p>One of the last changes to the Rust Standard Library was an overhaul of the IO subsystem. Most documentation (including the 
official docs) request that you continue to use <code>std::old_io</code> until the overhaul is complete.</p>
<h2>Memory Management</h2><p>One of the larges differences between the two languages is the presence/absence of a Garbage Collector. In Ruby (and other GC&#39;d
languages), the GC is used to clean up expired references from the runtime, to periodically free unused memory from the 
application being run.</p>
<p>In Rust, there is no GC. Instead, the compiler has a notion of &quot;ownership,&quot; as we discussed earlier. Check out the following 
snippet:</p>
<pre><code class="language-rust">    let x = Box::new(5);
    {   
        let y = x;
    }   

    println!(&quot;x == {}&quot;, x);
</code></pre>
<p>In line 1, we create a new heap-allocated variable, and store 5 into it. Because it&#39;s on the heap, the value of x is really
a pointer to the memory location of the &quot;Box&quot; - the owned variable. Now, in line 3, we create the variable y, and store x&#39;s value 
into it; this is considered by the Rust compiler to be a &quot;move&quot; - both pointers point to the data, but rust treats y as the 
new owner of the Box, as x has transferred ownership. Because of this, line 6 fails to compile correctly, as the value owner 
has been moved:</p>
<pre><code class="language-plaintext">src/main.rs:7:25: 7:26 error: use of moved value: `x`
src/main.rs:7     println!(&quot;x == {}&quot;, x);
                                      ^
note: in expansion of format_args!
&lt;std macros&gt;:2:43: 2:76 note: expansion site
&lt;std macros&gt;:1:1: 2:78 note: in expansion of println!
src/main.rs:7:5: 7:28 note: expansion site
src/main.rs:4:13: 4:14 note: `x` moved here because it has type `Box&lt;i32&gt;`, which is moved by default
src/main.rs:4         let y = x;
                          ^
src/main.rs:4:14: 4:14 help: use `ref` to override
error: aborting due to previous error
</code></pre>
<p>Because of this, you need to keep track of what values you&#39;re using where, who&#39;s got the ownership of the value, and how long 
the value is alive. </p>
<h2>Documentation!</h2><p>This will be something that comes with more use and more exposure, but right now, outside of the <a href="http://doc.rust-lang.org/">Rust standard documentation</a>, there
isn&#39;t much for explanations on how/where to do things is, in comparison to the Ruby ecosystem on the Internet. As I get more
into it, I&#39;m hoping to have more posts like this, where I can go into greater detail on how to do things in a rust-like way.</p>
<p>Moving into Systems programming is weird for me; I know there&#39;s some things that I&#39;m missing, and I have a lot more power to 
play around with the system at a lower level, but I struggle with finding projects to work on. Either I choose something 
substantially big, or it ends up being examples on <a href="http://reddit.com/r/dailyprogrammer">/r/dailyprogrammer</a>. I&#39;d like to put 
together something in the middle soon.</p>
]]></description>
        <pubDate>Sat Jan 30 2016 01:32:33 GMT-0800 (PST)</pubDate>
        <link>/posts/rust-non-systems-programmer</link>
        <guid isPermaLink="true">/posts/rust-non-systems-programmer</guid>
      </item>
    
    
      <item>
        <title>Yearly Refresh Time!</title>
        <description><![CDATA[<p>I don&#39;t know if it&#39;s the digital form of spring cleaning, or if there&#39;s a standing need to clean things up
and keep them looking nicely, but I found it time this weekend to update the visual and functional aspects
of my blog. With that being said, welcome to ballpointcarrot.net, version...4, I think?  I haven&#39;t done a 
terribly good job of keeping an active archive, and haven&#39;t consulted the Internet Archive to see if they
have any of the previous iterations.</p>
<p>With the new layout comes a new backend engine for producing the contents - I&#39;ve moved from Octopress 
(which, while nice, dictated a structure and tooling a little more than necessary) to a Node.js static 
site generator called <a href="http://harpjs.com/">Harp</a>. </p>
<p>Because this is a site generator first, the structure used for blog-like things, such as tags, feeds, etc.
come as extras; It took a little bit of searching to find a theme and pattern I liked, and still didn&#39;t 
fit 100%. Fortunately, because of the flexibility provided, I adjusted the structure of how data was read
and inserted, and made it truly my own.</p>
<h2>About the new platform</h2><p>As I mentioned, the base of the new platform is Harp. The <a href="https://github.com/kennethormandy/hb-casper">base theme</a> 
is a port of <a href="https://github.com/TryGhost/Casper">Casper</a>, which is the default theme for the 
<a href="https://ghost.org/">Ghost</a> blogging platform. In addition, I&#39;ve added a more flexible syntax 
highlighting library called <a href="http://prismjs.com/">Prism</a> to help with code snippets (which I&#39;ll be able 
to use more frequently, I&#39;m hoping!). </p>
<pre><code class="language-javascript">christopher.blog_upgrade = true;
</code></pre>
<p>Overall, the site is still set to run on GitHub Pages; I appreciate
that they allow hosting like that, and moreover, allow the Hostname redirection that they do.</p>
<p>Migration of the actual data from the old platform to the new one worked pretty well. As they say, the 
best knowledge transfer medium is plain text. No reading from databases, no conversions; just a little bit
of modification of the markdown files in one platform to the other.</p>
<h2>Now the question - <em>will he keep updating it?</em></h2><p>That will remain to be seen. I had a goal of writing every two days; we saw how well that went. But, I&#39;ve
been working on teaching myself new things in the intervening time, and I think it may prove to be good 
not just for me, but for people reading, to start putting my thoughts to paper, so to speak.</p>
<p>I&#39;m cautiously optimistic that I can do a better job of updating things. We&#39;ll see if I can make a pattern
out of it.</p>
]]></description>
        <pubDate>Sat Jan 30 2016 01:32:33 GMT-0800 (PST)</pubDate>
        <link>/posts/yearly-refresh-time</link>
        <guid isPermaLink="true">/posts/yearly-refresh-time</guid>
      </item>
    
    
      <item>
        <title>Tooling Around</title>
        <description><![CDATA[<p>So, I traded in my work laptop today to replace it with a new one. I&#39;m glad I made the switch, as there were things that
I didn&#39;t need on the old one, and I didn&#39;t want to have to mess with a major upgrade path and the inevitable breaks that
were to come with it. Additionally, my workflow and suite of tools works better with the new hardware (I&#39;ve switched to
an Ubuntu laptop from an OSX one), and it will centralize my daily work (email and communication, scheduling and
planning) around the laptop instead of the desktop, which can then be devoted to other tasks (like running development
projects).</p>
<p>Because of the switch, it got me to thinking about the tooling that I use on a daily basis, and how to most smoothly
move into getting that installed on a new system. Replacing hardware is tough work for a developer/engineer, and that
would be time otherwise spent working on problems or creating new things. I&#39;m going to provide a rundown of my toolchain
and how I orchestrate the installation of the tools.</p>
<p>Note that, as this is tied to Linux, the tools will obviously be Linux-based. There are different flows for other OSs;
each ecosystem operates differently. This is my solution for myself; YMMV.</p>
<h2>Communication</h2><p>Being able to send and receive messages is key. Ten minutes after receiving my laptop today, I had a meeting that I had
to run to, and to send an email containing some details to one of the attendees. I run my email from the office Exchange server to my desktop (and now the laptop) using
<a href="http://fetchmail.berlios.de/">fetchmail</a> and <a href="http://www.procmail.org/">procmail</a>. While these may seem esoteric, and
not terribly user-friendly, it gives me a strength that no other email client has - I can run scripts around my
email. Procmail handles the filtering of the incoming fetchmail setup, and separates the email into the various folders
for easy filtering rules (based on sender, topic in subject, etc.). Emails sent specifically to me in the To: header get
a bit more prevalence, and emails with calendar invites as attachments get the attachment parsed and sent to a
calendar. Since everything was using a standard Maildir format for storage on the laptop, migrating the email was as
easy as running rsync between the two systems.</p>
<p>This covers only the receipt of email, not sending. Since December (referencing
<a href="http://www.ballpointcarrot.net/blog/2014/02/07/learning-a-new-editor/">an earlier post</a>), I&#39;ve been using Emacs to do
more and more things - this has grown to include IRC chat (via the <a href="http://www.emacswiki.org/wiki/ERC">ERC</a> plugin) and
email (using a pair of utilities called <a href="http://www.djcbsoftware.nl/code/mu/mu4e.html">mu and mu4e</a>). While normally I&#39;d
entertain jokes here (like &quot;emacs is a good OS, it just needs a decent text editor.&quot;), I have to say that it&#39;s handy to
have a single place to go for all the work you need to do. mu is external to Emacs, and is a search engine over your
Maildir folders; you can use it on the command line to pick out emails that pertain to certain topics, and filter them
by specific recipients and whether they&#39;re new/flagged/unread/etc. Mu4e wraps that logic in an easy to use mail client
from within Emacs, and it&#39;s been much nicer than sifting through Outlook.</p>
<h2>Environment</h2><p>So I&#39;ve got some software... now I have to customize what I run it in. Rather than stay with Unity (the default Ubuntu
installed WM, which I frankly feel is counter-intuitive), I choose to go to a lesser known window manager called
<a href="http://awesome.naquadah.org/">&quot;Awesome.&quot;</a> Appropriately named, as I haven&#39;t left it since I found it. By using a tiling
window manager, I don&#39;t have to worry about resizing things to fit. Additionally, the entire interface is programmable
via Lua, so defining custom shortcut keys and startup programs is fairly simple:</p>
<pre><code class="language-lua">    -- ...
    -- Hotkeys for handling window resizing and management:
    clientkeys = awful.util.table.join(
    awful.key({ modkey,           }, &quot;f&quot;,      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ modkey,           }, &quot;q&quot;,      function (c) c:kill()                         end),
    awful.key({ modkey, &quot;Control&quot; }, &quot;space&quot;,  awful.client.floating.toggle                     ),
    awful.key({ modkey, &quot;Control&quot; }, &quot;Return&quot;, function (c) c:swap(awful.client.getmaster()) end),
    awful.key({ modkey,           }, &quot;o&quot;,      awful.client.movetoscreen                        ),
    awful.key({ modkey, &quot;Shift&quot;   }, &quot;r&quot;,      function (c) c:redraw()                       end),
    awful.key({ modkey,           }, &quot;t&quot;,      function (c) c.ontop = not c.ontop            end),
    awful.key({ modkey,           }, &quot;n&quot;,
        function (c)
            -- The client currently has the input focus, so it cannot be
            -- minimized, since minimized clients can&#39;t have the focus.
            c.minimized = true
        end),
    awful.key({ modkey,           }, &quot;m&quot;,
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c.maximized_vertical   = not c.maximized_vertical
        end)
    )
    -- Autostarts
    awful.util.spawn_with_shell(&quot;/usr/bin/startup-script.sh&quot;)
    awful.util.spawn_with_shell(&quot;~/bin/runme&quot;)
</code></pre>
<p>Awesome&#39;s libraries have amusing names: &quot;awful&quot;, &quot;naughty&quot;, and &quot;vicious&quot;, to name a few. Currently, I have this
attached to the GNOME session layer, so I get the benefit of GNOME&#39;s background and icon management, but the window
management of awesome.</p>
<h2>Code</h2><p>A programmer can&#39;t do much unless he has languages to write in. For me, that means having to add some additional
packages:</p>
<ul>
<li><p><a href="https://github.com/sstephenson/rbenv">rbenv</a> - this manages various installations of Ruby and the ecosystem around
 it. Similar to RVM, this uses shim binaries to point to rotating Ruby versions, so that I can use one version with
 one app, and use a legacy version to work on an older one.</p>
</li>
<li><p><a href="https://github.com/creationix/nvm">nvm</a> - Same idea as rbenv, but for node.js. These libraries give me the
 flexibility of using different runtimes for different applications, and makes it easier to install the languages than
 with the system-provided binaries (which can either be out of date or harder to manage).</p>
</li>
<li><p>I&#39;ve already mentioned it, but Emacs is in here, too. Being able to easily see language and typographical issues with
 flycheck, syntax highlighting for languages available via <a href="https://github.com/dimitri/el-get">el-get</a>, and being able
 to launch a simple shell within the editor to run a test is a blessing to getting things done.</p>
</li>
</ul>
<h2>Tomorrow</h2><p>This was just for the first day, too. Things like browser plugins (which we use a myriad of for work) will likely come
soon enough, and there will be tweaks to all of the stuff listed as what I need in the environment changes. Let me know
if you have any questions on any of this, and I&#39;ll do what I can to answer them.</p>
]]></description>
        <pubDate>Sat Jan 30 2016 01:32:33 GMT-0800 (PST)</pubDate>
        <link>/posts/tooling-around</link>
        <guid isPermaLink="true">/posts/tooling-around</guid>
      </item>
    
    
      <item>
        <title>Redesign, and Goals</title>
        <description><![CDATA[<h2>New Site Layout!</h2><p>Hey everyone! After taking time to look through and see what it would take to maintain the old ballpointcarrot.net site (residing on a mostly-dormant 1-dyno Heroku install), I&#39;ve decided to forgo it and run everything on Octopress. Let me know if you have positives/negatives to say about the changes. I feel it&#39;s a positive step, and it&#39;s one less account to keep open for me. Bonus.</p>
<h2>Goals</h2><p>I realize I don&#39;t post much on here, so I want to set a goal for myself for new blog posts. So, starting today, until the end of June, I&#39;ll strive to make a post every 2 days. You should expect to see something Friday. This will allow me to get some of my mind dumped out to the Internet, and expose my thinking to approaches for software. It will also give me time to put down things I&#39;ve learned while working at AWS - expect a lot of the posts to be covering issues with CloudFormation, Elastic Beanstalk, Auto Scaling and more. Plus, I&#39;ll probably have some talk on new JS frameworks, Docker, Ruby gotchas, and anything else I can think of.</p>
<p>I still should be pretty reachable via the site - the sidebar for posts has my G+, Twitter and email nearby to click on. I&#39;ve also added Disqus comments below, so let me know what you think of the new layout, and my future content.</p>
]]></description>
        <pubDate>Sat Jan 30 2016 01:32:33 GMT-0800 (PST)</pubDate>
        <link>/posts/redesign-and-goals</link>
        <guid isPermaLink="true">/posts/redesign-and-goals</guid>
      </item>
    
    
      <item>
        <title>Learning a new Editor</title>
        <description><![CDATA[<h2>Background</h2><p>I often fall back to my (now well-worn) copy of <a href="http://pragprog.com/book/tpp/the-pragmatic-programmer">The Pragmatic Programmer</a> to take a look at things I can do to hone my abilities as a programmer. Recently, the two rules that have most recently hit me as things I haven&#39;t put much focus on are <em>Invest Regularly in Your Knowledge Portfolio</em>, and <em>There Are No Final Decisions</em>. In a fit of Christmas downime enegry, I decided to incorporate these principles by taking myself out of my normal comfort zone, and cutting out one of my most widely used tools - vim.</p>
<p>I&#39;ve been a vimmer for many years, and I&#39;ve incorporated utilities passed down from greater minds than I (Tim Pope, the guys at Pivotal, etc.) and had become comfortable in how I used my text editor day-to-day. I had a nice workflow set up, utilizing multiple vim tabs and separate sessions within tmux windows, and life was pretty good.</p>
<p>Then, in December, the challenge was set: strip vim out of my workflow for good, and find something else.</p>
<p>Naturally, and guided by one of my coworkers, I managed to settle on what is generally considered to be the prime competitor to vim - Emacs.</p>
<h2>Baby Steps</h2><p>I&#39;ve had forays into learning Emacs before, but I&#39;ve always shied away, after playing with some basic tooling, and forgetting how to close it more often than I care to admit. This time was different, though; I had more years of experience under my belt, and it was more about getting myself into an uncomfortable place before I gain more knowledge.</p>
<p>My first thought was to find some type of starting guide. While the Emacs tutorial helped in terms of understanding navigation and simple editing, it didn&#39;t really show me the true power of the environment that I had gained. A cursory google search brought me to the <a href="https://github.com/technomancy/emacs-starter-kit">Emacs Starter Kit</a>. This toolkit provides some default setting to get you started with the environment; I used the documentation around it to gain knowledge of things like Melpa and Marmalade, which act as Emacs Package Managers of sorts.</p>
<p>Following my initial setup with the starter kit, I started delving into the <a href="http://www.emacswiki.org/emacs/">emacs wiki</a>. This became a much more handy resource to me, as it provided me with multiple provided solutions to given issues that I&#39;ve encountered while converting my vim-based mind to a constantly-insert-enabled editor. When I&#39;d run into an issue where I found something I&#39;d like to do similar to vim, I&#39;d head to the wiki to find what analogs are available. Once I&#39;d find a package which did what I looked for, I&#39;d test it out with an M-x pacakge-install, and incorporate it into my init.el when I felt I had it down.</p>
<h4>Evil?</h4><p>I had been asked while converting why I decided not to use a vi-like editor package for Emacs (like Evil or Viper). I felt that, if I were to do this, it would be skimping out on what I should be learning, and I&#39;d get less of an understanding of Emacs because I was sticking to my old method of doing things. Thus, I opted for Emacs&#39;s standard of editing, and no vi-emulation modes.</p>
<h2>Post-move</h2><p>These are the things that I&#39;ve discovered in the two months since I switched:</p>
<ul>
<li>Split pane support. I actually like the way that Emacs splits its windows better than vim. A C-x 2 or C-x 3 is an easy way to remember it; coupled with the &#39;workgroups2&#39; package, configurations can be stored across sessions, too.</li>
<li>Lisp. This has been a slow one for me, but I&#39;m becoming more interested in learning Lisp and Lisp-like languages, like Clojure. I have a lot of work to do here, and that will be something to work on in the future.</li>
<li>Tramp. Being able to edit files across an SSH tunnel is a fantastic feature.</li>
<li>Buffers without files. Since the editor is meant to live on indefinitely, it&#39;s nice to spin up a new buffer and set the mode(s) I want, and let it reside in memory for a while before saving it. If I need to, a save is close enough away, but it works wonders for when I need to take some quick notes.</li>
<li>ERC. I no longer need a separate IRC cilent; Emacs handles it for me. This is fantastic for me at work, where we frequently use chat to talk around.</li>
</ul>
<p>Things I wish I had from Vim:</p>
<ul>
<li>Sentence-like movement. I&#39;ve sort of rebuilt this on my own with a combination of line-jumps (M-x goto-line) and ace-jump-mode, but being able to translate &quot;^3wci(&quot; into what it can do in Vim is a skill I have yet to master.</li>
<li>Mixing modes in HTML. This was noticeably less of a problem in Vim, but I don&#39;t know if it was due to the editor or my lack of noticing that showed just how difficult it is to switch contexts from HTML/CSS/JS all in the same file. I&#39;ve tried doing the nXML hack and multiple modes, but those have worked to no avail.</li>
<li>Closing the editor. True, I can leave Emacs. But, I miss popping up a new window for one file, and then leaving right after a quick edit.</li>
<li>Workspace management. Because of the way I separated files into tabs in Vim, I knew each tab matched a different section of what I was working on (or another project entirely).  I lack this with the way that buffers are managed by default in Emacs. I&#39;m still looking for better ways of handling this management, though - workgroups2 has been a nice start.</li>
</ul>
<p>Things I know I still have yet to learn:</p>
<ul>
<li>More Lisp. I&#39;ve gotten a good start, but that&#39;s a deep rabbit hole.</li>
<li>Shell, email within Emacs. I used to use a lot of separate tools - now that Emacs contains most of them, I&#39;d like to get better at handling those tasks within Emacs.</li>
<li>Org-mode. I&#39;ve seen my coworker pull off some crazy things with scheduling and notes within Org-mode, and I&#39;d love to get to the point where I can do them, too.</li>
<li>Macros and scripting. My next Pragmatic tenet is <em>Write Code That Writes Code</em>; I think getting your editor set to facilitate your programming counts. :)</li>
</ul>
<p>We&#39;ll see what the next few months hold.</p>
]]></description>
        <pubDate>Sat Jan 30 2016 01:32:33 GMT-0800 (PST)</pubDate>
        <link>/posts/learning-a-new-editor</link>
        <guid isPermaLink="true">/posts/learning-a-new-editor</guid>
      </item>
    
    
      <item>
        <title>Well, I should've been paying attention</title>
        <description><![CDATA[<p>So, I guess on 30 April 2013, Posterous Spaces was shuttered. You should see <a href="http://www.posterous.com">what&#39;s there now</a>.</p>
<p>Then, a full three months later, someone tells me that ballpointcarrot.net isn&#39;t functioning.
I figure, &quot;I can check it when I find some time. It&#39;s been busy.&quot; </p>
<p>Cue almost a <em>month</em> after that, and I find that Posterous is gone (as is the content on the old blog).
Now, I&#39;m working to rebuild and reset different platforms/ideas that can both provide me CNAME linking
to <a href="http://blog.ballpointcarrot.net">blog.ballpointcarrot.net</a>, and I ran across Github Pages and Octopress.
I&#39;m gonna give it a try for a while, and see what happens.</p>
<p>Meanwhile, the main ballpointcarrot site has to go through a redesign, as the automatic feed parsing thing has 
broken enough times that it&#39;s time to replace it. Expect a new look (but the same old logo) sometime when I find 
some more time again - so November, maybe. :S</p>
]]></description>
        <pubDate>Sat Jan 30 2016 01:32:33 GMT-0800 (PST)</pubDate>
        <link>/posts/well-i-shouldve-been</link>
        <guid isPermaLink="true">/posts/well-i-shouldve-been</guid>
      </item>
    
  </channel>
</rss>
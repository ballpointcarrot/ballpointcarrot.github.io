<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>Ballpointcarrot.net</title><generator uri="https://perun.io/" version="0.4.2-SNAPSHOT">Perun</generator><link href="http://www.ballpointcarrot.net/" type="text/html"></link><link href="http://www.ballpointcarrot.net/atom.xml" rel="self"></link><link href="http://www.ballpointcarrot.net/atom.xml" rel="first"></link><link href="http://www.ballpointcarrot.net/atom.xml" rel="last"></link><updated>2017-09-24T05:13:22Z</updated><id>http://www.ballpointcarrot.net/</id><author><name>Christopher Kruse</name><email>ckruse@ballpointcarrot.net</email></author><entry><id>urn:uuid:2d25d633-a37a-4853-ab37-2de82245fd33</id><title>The DIY Web</title><link href="http://www.ballpointcarrot.net/posts/the-diy-web.html" type="text/html" title="The DIY Web" rel="alternate"></link><published>2017-08-25T00:00:00Z</published><updated>2017-08-25T00:00:00Z</updated><content type="html" xml:base="http://www.ballpointcarrot.net/posts/the-diy-web.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0" name="viewport"&gt;&lt;meta content="Thoughts and ramblings of Christopher Kruse, a software engineer based in Seattle, WA." name="description"&gt;&lt;link href="/assets/css/screen.css" rel="stylesheet" type="text/css"&gt;&lt;link href="//fonts.googleapis.com/css?family=Noto+Serif:400,700,400italic%7COpen+Sans:700,400" rel="stylesheet" type="text/css"&gt;&lt;link href="/assets/css/prism.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;body class="post-template"&gt;&lt;main class="content" role="main"&gt;&lt;header class="post-header"&gt;&lt;a class="blog-logo" href="http://www.ballpointcarrot.net/"&gt;&lt;span class="blog-title"&gt;Ballpointcarrot.net&lt;/span&gt;&lt;/a&gt;&lt;/header&gt;&lt;article class="post h-entry"&gt;&lt;span class="post-meta"&gt;&lt;time class="dt-published" datetime="Sun, 20 Aug 2017"&gt;&lt;a href="http://www.ballpointcarrot.net/posts/the-diy-web.html"&gt;Sun, 20 Aug 2017&lt;/a&gt;&lt;/time&gt;&lt;div class="tags"&gt;&lt;a class="p-category" href="/tags/Internet.html" style="padding: 0 0.5rem 0 0;"&gt;Internet&lt;/a&gt;&lt;a class="p-category" href="/tags/Social Media.html" style="padding: 0 0.5rem 0 0;"&gt;Social Media&lt;/a&gt;&lt;a class="p-category" href="/tags/Software.html" style="padding: 0 0.5rem 0 0;"&gt;Software&lt;/a&gt;&lt;/div&gt;&lt;/span&gt;&lt;h1 class="post-title p-name"&gt;The DIY Web&lt;/h1&gt;&lt;section class="post-content e-content"&gt;&lt;blockquote&gt;
&lt;p&gt;TL;DR: Building on basic email, and with the advent of Mastodon, XMPP, Matrix and more, using and building federated networks could bring immesurable improvements to the Internet.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a href="#on-walled-gardens" id="on-walled-gardens"&gt;&lt;/a&gt;On Walled Gardens&lt;/h3&gt;
&lt;p&gt;One of the more controversial decisions I&amp;rsquo;ve made for myself in the past few years was to take myself off of the Facebook platform. While this makes it far harder for friends and family to scout me out on the Internet as a whole, I had reservations about using their platform, and ultimately deactivated my account in early 2011. The reason for this mostly stems out of two main points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first takes us way back to April of 2010. Back then, Facebook &lt;a href="http://lifehacker.com/5549394/how-to-return-facebook-privacy-settings-to-what-you-signed-up-for"&gt;introduced a change&lt;/a&gt; to their platform; as a result, all users&amp;rsquo; permissions defaulted to be &lt;a href="https://www.wired.com/2010/05/facebook-rogue/"&gt;public by default&lt;/a&gt;. This caused a fair amount of backlash at the time, and ultimately caused the FTC &lt;a href="https://www.ftc.gov/news-events/press-releases/2011/11/facebook-settles-ftc-charges-it-deceived-consumers-failing-keep"&gt;to sanction Facebook&lt;/a&gt; as a result of this and earlier privacy concerns.&lt;/li&gt;
&lt;li&gt;The second is due to their need to create a wide break between content on the inside of their platform and the rest of the Internet (the &amp;ldquo;walled garden&amp;rdquo;, as is often used). As a result of this separation, users who either are not on Facebook at all, or may be logged out for the time being, lose the ability to access media and content stored there.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Internet was founded with the principle of enabling people to share ideas - the existence of some of the largest Internet companies today started out by enabling people to find and share information. By limiting access to resources, data and content to only a select subset of individuals, you restrict the ability for people to grow from those ideas. I&amp;rsquo;m not saying that there can&amp;rsquo;t be some access limits (although, if you want to keep something private, maybe putting it on a global network isn&amp;rsquo;t the best idea - better argument for a different day, though); content creators want to retain use and control of their content. However, at the scale in which Facebook exists, the limitations of access to those resources is stifling to those who could use it.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#on-centralization" id="on-centralization"&gt;&lt;/a&gt;On Centralization&lt;/h3&gt;
&lt;p&gt;Facebook, as well as Twitter, Instagram, Google, etc. all share something in common: they have one point of access. When that access is cut off or limited (think of Github outages, which have been dubbed &amp;ldquo;developer holidays&amp;rdquo; based on their impact to the tech community), it can be disruptive to a large amount of people. In addition, by selecting one route to access for these services, the companies that run them can start to dictate consumption:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Twitter heavily limits access for third-party phone apps into the platform&lt;/li&gt;
&lt;li&gt;Snapchat doesn&amp;rsquo;t provide a Windows Phone app, but &lt;a href="http://www.pcworld.com/article/2862088/snapchat-cracks-down-on-windows-phone-imitator-apps.html"&gt;requested Microsoft pull third-party apps&lt;/a&gt; providing that functionality from their app store&lt;/li&gt;
&lt;li&gt;the implementation, backlash and subsequent removal of YouTube&amp;rsquo;s &lt;a href="https://gigaom.com/2013/11/11/users-outraged-over-youtubes-switch-to-google-real-names-policy/"&gt;&amp;ldquo;Real Name&amp;rdquo; policy&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This centralization shows that, as we allow sole consumption from these groups, we risk reducing access to them; as a way of providing robustness to the Internet, there should be more than these single players in their respective spaces, so that we can operate in the event something goes down.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#federation" id="federation"&gt;&lt;/a&gt;Federation&lt;/h3&gt;
&lt;p&gt;This spring, Twitter made the (unfortunate) decision to update some of their UI - most notably, they &lt;a href="https://motherboard.vice.com/en_us/article/d7qkmx/the-new-twitter-replies-are-giving-me-an-ulcer"&gt;removed usernames from replies in messages&lt;/a&gt;. People didn&amp;rsquo;t enjoy this (as noted above). Whenever there&amp;rsquo;s a big event like this (Reddit has had them a number of time in their past, too), a subset of users start to look for competing products. Around this time, people discovered the Mastodon project, which provides a Twitter-like interaction style, but with a couple of major shake-ups:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You had 500 characters (If you&amp;rsquo;ve tried it after years on Twitter - it&amp;rsquo;s SO MUCH SPACE).&lt;/li&gt;
&lt;li&gt;There&amp;rsquo;s a &amp;ldquo;Content Warning&amp;rdquo; function, which hides things that may be offensive or may cause discomfort.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The major difference (for the sake of our discussion) was that, instead of being one service, it is a network of separate running copies of the server software, run independently (called mastodon &amp;ldquo;instances&amp;rdquo;). This brings in some tradeoffs: for example, since you can organize communities on separate instances, those communities can start to build on specific topics. However, this doesn&amp;rsquo;t mean you&amp;rsquo;re limited to just the people on your instance. Through a process called &amp;ldquo;Federation&amp;rdquo;, users on one instance can follow users from another; the server then keeps that user and their instance up to date for the users that follow them on their home instance.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NB: The author of the above article tried out Mastodon around this time too - &lt;a href="https://motherboard.vice.com/en_us/article/783akg/mastodon-is-like-twitter-without-nazis-so-why-are-we-not-using-it"&gt;you should see her take on it&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A big driver for me after being introduced to Mastodon is the power to do things your way. I run my own personal instance (at &lt;a href="https://social.ballpointcarrot.net"&gt;https://social.ballpointcarrot.net&lt;/a&gt;); this gives me the ability to personalize and customize my instance to how I need it to operate. However, due to the communication protocol (GNU Social) underlying it, all instances have the capability to communicate with each other.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#the-diy-web" id="the-diy-web"&gt;&lt;/a&gt;The DIY Web&lt;/h2&gt;
&lt;p&gt;I would love to take this concept of widespread, federated or decentralized services, which define a common protocol for communication, and see them grow on the Internet. Moreover, since these give you the ability to host them for personal or individual use, I would love to see the rise of the &amp;ldquo;DIY Web&amp;rdquo; - media, content and resources shared the way you want them to be. I see great benefits to having these platforms: Technology literacy, Robustness of content, Better software as a result of the needs around these platforms, all while retaining the social aspect of interacting and showing our voices.&lt;/p&gt;
&lt;p&gt;Email is exactly this. Not everyone has (or even wants, in cases) a Gmail account. There is no absolute requirement that your email go to Yahoo/Hotmail/Gmail/etc. - Running an email server is something you can do for your self, your household, your extended family. The requirements are straightforward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set up the software to receive the email.&lt;/li&gt;
&lt;li&gt;Set up the accounts to have the mail delivered to.&lt;/li&gt;
&lt;li&gt;Tell everyone how to get their email (configure the clients).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem here is, those steps are &lt;strong&gt;hard&lt;/strong&gt;. Most people aren&amp;rsquo;t taught how installing packages on their desktop goes - getting them to install and configure a mail server would be insane.&lt;/p&gt;
&lt;p&gt;With the current technology teaching path, that is.&lt;/p&gt;
&lt;p&gt;Think about a curriculum that uses setting up a project like this as its goal. In it, this gives you the ability to talk about many concepts about computing that would largely go untouched. Networking (how do things go in and out to the Internet), configuration of software (not just installing it), understanding how the messages are created and handed off from place to place - there&amp;rsquo;s a &lt;strong&gt;lot&lt;/strong&gt; of detailed information that can be learned, just by trying to solve this as an exercise. Once these people who have gone though this new training, they&amp;rsquo;re going to be better set for dealing with technology out in their daily lives (and hopefully with less of the &amp;ldquo;oh I&amp;rsquo;m not good with computers&amp;rdquo; hand-waving affectation).&lt;/p&gt;
&lt;p&gt;At the same time, this is a place where those in the technology space can help. Part of the difficulty in this process is that the resources that are being dealt with are built in a way that &amp;ldquo;technology people&amp;rdquo; know how to control. If we can take some time and energy to make explaining the concepts here easier, and to simplify the process of building out these types of applications, then we can make it easier to extend these types of federated networks out to the world writ large. This is a perfect place for something like Docker - a premade container of a suite of coordinated services will help to allow easy installation and execution of systems that would otherwise take hours to properly set up and activate - hours that some at the target end don&amp;rsquo;t have to spend in the review of those setup instructions. Once these improvements are in place, we can then turn to making the communications protocols that these systems will use more stable, more robust, and provide new features and extensions to them.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m excited to see where federated applications like this can take us. The more these can be used, the better off we are in terms of open platform access, robustness (as the data propagates out to other nodes), and the benefits brought in from the learning landscape, as well as benefits to the software itself.&lt;/p&gt;
&lt;/section&gt;&lt;footer class="post-footer"&gt;&lt;section class="author"&gt;&lt;h4&gt;Christopher Kruse&lt;/h4&gt;&lt;p&gt;AWS Engineer, puzzle/board game addict, choir singer, and a teller of terrible puns.&lt;/p&gt;&lt;/section&gt;&lt;section class="share"&gt;&lt;span class="share-twitter"&gt;&lt;h4&gt;Share this post&lt;/h4&gt;&lt;a class="icon-twitter" href="https://twitter.com/share?text=&amp;amp;url=http://www.ballpointcarrot.net/posts/the-diy-web.html" onclick=="window.open(this.href, &amp;apos;twitter-share&amp;apos;, &amp;apos;width=550,height=235&amp;apos;);return false;"&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Twitter&lt;/span&gt;&lt;/span&gt;&lt;span class="share-fb"&gt;&lt;a class="icon-facebook" href="https://www.facebook.com/sharer/sharer.php?u=http://www.ballpointcarrot.net/posts/the-diy-web.html" onclick="window.open(this.href, &amp;apos;facebook-share&amp;apos;,&amp;apos;width=580,height=296&amp;apos;);return false;"&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Facebook&lt;/span&gt;&lt;/span&gt;&lt;span class="share-reddit"&gt;&lt;a class="icon-reddit" href="" onclick=""&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Reddit&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/footer&gt;&lt;/article&gt;&lt;/main&gt;&lt;footer class="site-footer"&gt;&lt;a class="subscribe icon-feed" href="http://www.ballpointcarrot.net/atom.xml"&gt;&lt;span class="tooltip"&gt;Subscribe!&lt;/span&gt;&lt;/a&gt;&lt;div class="inner h-card"&gt;&lt;div&gt;I'm &lt;span class="p-name"&gt;Christopher Kruse&lt;/span&gt;.&lt;/div&gt;&lt;ul class="web-identity"&gt;&lt;li&gt;&lt;a class="u-url" href="https://twitter.com/ballpointcarrot" rel="me" target="_blank"&gt;Twitter&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-url" href="https://social.ballpointcarrot.net/@ballpointcarrot" rel="me" target="_blank"&gt;Mastodon&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-url" href="https://github.com/ballpointcarrot" rel="me" target="_blank"&gt;Github&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-email" href="mailto:ckruse@ballpointcarrot.net" target="_blank"&gt;email&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="inner"&gt;&lt;section class="copyright"&gt;All content copyright &lt;a href="http://www.ballpointcarrot.net/"&gt;Ballpointcarrot.net&lt;/a&gt; &amp;copy; 2017 &amp;bull; All rights reserved.&lt;/section&gt;&lt;/div&gt;&lt;/footer&gt;&lt;script src="/assets/js/index.js" type="text/javascript"&gt;&lt;/script&gt;&lt;script src="/assets/js/prism.js" type="text/javascript"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>Christopher Kruse</name><email>ckruse@ballpointcarrot.net</email></author><category term="Internet"></category><category term="Social Media"></category><category term="Software"></category></entry><entry><id>urn:uuid:77c34553-ad48-4109-9c71-5c3b004e816d</id><title>Tracking while you Gogo</title><link href="http://www.ballpointcarrot.net/posts/tracking-while-you-gogo.html" type="text/html" title="Tracking while you Gogo" rel="alternate"></link><published>2017-01-09T00:00:00Z</published><updated>2017-01-09T00:00:00Z</updated><content type="html" xml:base="http://www.ballpointcarrot.net/posts/tracking-while-you-gogo.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0" name="viewport"&gt;&lt;meta content="Thoughts and ramblings of Christopher Kruse, a software engineer based in Seattle, WA." name="description"&gt;&lt;link href="/assets/css/screen.css" rel="stylesheet" type="text/css"&gt;&lt;link href="//fonts.googleapis.com/css?family=Noto+Serif:400,700,400italic%7COpen+Sans:700,400" rel="stylesheet" type="text/css"&gt;&lt;link href="/assets/css/prism.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;body class="post-template"&gt;&lt;main class="content" role="main"&gt;&lt;header class="post-header"&gt;&lt;a class="blog-logo" href="http://www.ballpointcarrot.net/"&gt;&lt;span class="blog-title"&gt;Ballpointcarrot.net&lt;/span&gt;&lt;/a&gt;&lt;/header&gt;&lt;article class="post h-entry"&gt;&lt;span class="post-meta"&gt;&lt;time class="dt-published" datetime="Sun, 8 Jan 2017"&gt;&lt;a href="http://www.ballpointcarrot.net/posts/tracking-while-you-gogo.html"&gt;Sun, 8 Jan 2017&lt;/a&gt;&lt;/time&gt;&lt;div class="tags"&gt;&lt;a class="p-category" href="/tags/airplanes.html" style="padding: 0 0.5rem 0 0;"&gt;airplanes&lt;/a&gt;&lt;a class="p-category" href="/tags/Programming.html" style="padding: 0 0.5rem 0 0;"&gt;Programming&lt;/a&gt;&lt;a class="p-category" href="/tags/fun.html" style="padding: 0 0.5rem 0 0;"&gt;fun&lt;/a&gt;&lt;/div&gt;&lt;/span&gt;&lt;h1 class="post-title p-name"&gt;Tracking while you Gogo&lt;/h1&gt;&lt;section class="post-content e-content"&gt;&lt;p&gt;I&amp;rsquo;m flying a lot more as part of my current job. As I write this, I&amp;rsquo;m on a flight from Seattle to Salt Lake City (first of a connection). I enjoy the fact that I can connect to the internet while going over 500 MPH at nearly 30,000 feet in the air - it&amp;rsquo;s a wonder of science that I can do these things.&lt;/p&gt;
&lt;p&gt;However, sometimes the cost of getting the in-flight internet is a little over-the-top. Most of the time, I&amp;rsquo;ll connect to the hotspot, but then use my laptop offline (http://devdocs.io offline mode is perfect for this).&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;On one of my last flights, though, I wanted to see just what I had access to. On Delta flights, there&amp;rsquo;s a flight status tracker on the web portal during the flight, which provides details about how the flight is going, times to arrival, and other flight data. A data nerd by nature, this is something I want, and normally pull up on the seat-back entertainment system (instead of watching a movie like a normal human being.)&lt;/p&gt;
&lt;p&gt;So, I chose to dive in to the Gogo portal to see what was possible. A quick look at the dev console in Chrome shows how the flight data page loads:&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/img/delta-gogo-chrome-devtools.png" alt="Chrome tools" /&gt;&lt;/p&gt;
&lt;p&gt;To my delight, not only do we have JSON requests for data, but they&amp;rsquo;re straightforward, easy to parse GET requests (easier to deal with than POSTs). To see how these are requested, I ran a quick &lt;code&gt;dig&lt;/code&gt; call against each of the FQDNs that were presented.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plain"&gt;Dig responses:
airborne.gogoinflight.com: 10.241.xxx.xxx
utils.gogoinflight.com: 10.241.xxx.xxx
d.sda.gogoinflight.com: -&amp;gt; gogoair-d3.openxenterprise.com -&amp;gt; 173.241.xxx.xxx
fig.gogoinflight.com:
        10.246.118.xxx
        10.246.119.xxx
        10.246.120.xxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Everything is in private class addressing space, meaning all of this routes internally within Gogo&amp;rsquo;s network. Meaning, we should be able to make these requests both inside and outside of the browser.&lt;/p&gt;
&lt;p&gt;The first we&amp;rsquo;ll look at, &amp;ldquo;statusTray&amp;rdquo;, doesn&amp;rsquo;t even need any parameters: &lt;code&gt;curl http://airborne.gogoinflight.com/abp/ws/absServices/statusTray&lt;/code&gt; gives me a straight JSON output of random details, including (amusingly) &amp;ldquo;gogoFacts&amp;rdquo;, a random fact that Gogo provides as interesting info (and a little bit of advertisement).&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;{
   &amp;quot;Response&amp;quot; : {
      &amp;quot;serviceInfo&amp;quot; : {
         &amp;quot;service&amp;quot; : &amp;quot;Inactive&amp;quot;,
         &amp;quot;remaining&amp;quot; : 0
      },
      &amp;quot;status&amp;quot; : 200,
      &amp;quot;gogoFacts&amp;quot; : &amp;quot;The world record for the longest Wi-Fi connection is&amp;quot; +
      &amp;quot;237 miles, held by Ermanno Pietrosemoli of Venezuela, who transferred&amp;quot;+ 
      &amp;quot;about 3 MB of data between the mountaintops of El Aguila and Platillon.&amp;quot;,
      &amp;quot;flightInfo&amp;quot; : {
         &amp;quot;tailNumber&amp;quot; : &amp;quot;N3753&amp;quot;,
         &amp;quot;HSpeed&amp;quot; : 576.4907,
         &amp;quot;longitude&amp;quot; : -119,
         &amp;quot;utcTime&amp;quot; : &amp;quot;2017-01-09T18:36:18.583Z&amp;quot;,
         &amp;quot;expectedArrival&amp;quot; : &amp;quot;2017-01-09T19:34:14Z&amp;quot;,
         &amp;quot;airlineCode&amp;quot; : &amp;quot;DAL&amp;quot;,
         &amp;quot;acpuVersion&amp;quot; : &amp;quot;10.4.0&amp;quot;,
         &amp;quot;altitude&amp;quot; : 33882.277,
         &amp;quot;flightNumberInfo&amp;quot; : &amp;quot;DAL1319&amp;quot;,
         &amp;quot;latitude&amp;quot; : 45.37,
         &amp;quot;videoService&amp;quot; : false,
         &amp;quot;abpVersion&amp;quot; : &amp;quot;7.0.1&amp;quot;,
         &amp;quot;departureAirportCode&amp;quot; : &amp;quot;KSEA&amp;quot;,
         &amp;quot;destinationAirportCode&amp;quot; : &amp;quot;KSLC&amp;quot;,
         &amp;quot;VSpeed&amp;quot; : 0.6136283
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Interestingly enough, this response was different on my flight today vs. the flight last week I played around with these requests. Your response(s) may be different. For instance, my new flight only responded with ICAO airport codes, and no IATA (3-letter) codes. The second request can use either, from what I can tell.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Based on this output, we can use a number of these values to craft the request for the &amp;ldquo;flightStatusByLeg&amp;rdquo; request:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-ruby"&gt;&amp;quot;http://utils.gogoinflight.com/flightService/flightStatusByLeg?&amp;quot;+
&amp;quot;flightNum=#{data[&amp;quot;Response&amp;quot;][&amp;quot;flightInfo&amp;quot;][&amp;quot;flightNumberInfo&amp;quot;]}&amp;quot;+
&amp;quot;&amp;amp;depDate=#{Time.now.strftime(&amp;quot;%Y-%m-%d&amp;quot;)}&amp;quot;+
&amp;quot;&amp;amp;originCode=#{data[&amp;quot;Response&amp;quot;][&amp;quot;flightInfo&amp;quot;][&amp;quot;departureAirportCode&amp;quot;]}&amp;quot;+
&amp;quot;&amp;amp;destCode=#{data[&amp;quot;Response&amp;quot;][&amp;quot;flightInfo&amp;quot;][&amp;quot;destinationAirportCode&amp;quot;]}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This request comes back as JSONP, or a JSON block wrapped in an executable function (a common method of executing code on callback in an AJAX request). If you&amp;rsquo;re parsing it as JSON, you&amp;rsquo;ll have to remove the function call before parsing:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-ruby"&gt;data2json = JSON.parse(data2.gsub!(&amp;quot;DLFSCallback (&amp;quot;,&amp;quot;&amp;quot;).gsub!(/\);$/, &amp;quot;&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This data set is much larger; mostly, because it gives you a sequenced point-to-point data stream of latitude, longitude, ground speed, and altitude! This data could be plotted and graphed in any way you see fit (my goal for next flight is to tie it to D3.js to plot my flight status :D).&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;{
   &amp;quot;flightStatusResponse&amp;quot; : {
      &amp;quot;flightStatusByLegResponse&amp;quot; : {
         &amp;quot;flightStatusTO&amp;quot; : {
            &amp;quot;flightOriginDate&amp;quot; : &amp;quot;2017-01-09T00:00:00.001-05:00&amp;quot;,
            &amp;quot;flightNumber&amp;quot; : &amp;quot;1319&amp;quot;,
            &amp;quot;changeOfAircraft&amp;quot; : &amp;quot;false&amp;quot;,
            &amp;quot;flightPositionTO&amp;quot; : {
               &amp;quot;altitude&amp;quot; : &amp;quot;37000&amp;quot;,
               &amp;quot;inFlightTimeMinutes&amp;quot; : &amp;quot;55&amp;quot;,
               &amp;quot;actualPositions&amp;quot; : [
                  {
                     &amp;quot;timeOver&amp;quot; : &amp;quot;0&amp;quot;,
                     &amp;quot;sequence&amp;quot; : &amp;quot;1&amp;quot;,
                     &amp;quot;latitude&amp;quot; : &amp;quot;47.4488&amp;quot;,
                     &amp;quot;groundSpeed&amp;quot; : &amp;quot;0&amp;quot;,
                     &amp;quot;longitude&amp;quot; : &amp;quot;-122.30944&amp;quot;,
                     &amp;quot;altitude&amp;quot; : &amp;quot;433&amp;quot;
                  },
                  {
                     &amp;quot;groundSpeed&amp;quot; : &amp;quot;0&amp;quot;,
                     &amp;quot;latitude&amp;quot; : &amp;quot;47.4462&amp;quot;,
                     &amp;quot;sequence&amp;quot; : &amp;quot;2&amp;quot;,
                     &amp;quot;timeOver&amp;quot; : &amp;quot;1483985273&amp;quot;,
                     &amp;quot;longitude&amp;quot; : &amp;quot;-122.3081&amp;quot;,
                     &amp;quot;altitude&amp;quot; : &amp;quot;300&amp;quot;
                  },
                  {
                     &amp;quot;longitude&amp;quot; : &amp;quot;-122.3082&amp;quot;,
                     &amp;quot;altitude&amp;quot; : &amp;quot;1700&amp;quot;,
                     &amp;quot;latitude&amp;quot; : &amp;quot;47.424&amp;quot;,
                     &amp;quot;groundSpeed&amp;quot; : &amp;quot;0&amp;quot;,
                     &amp;quot;timeOver&amp;quot; : &amp;quot;1483985303&amp;quot;,
                     &amp;quot;sequence&amp;quot; : &amp;quot;3&amp;quot;
                  },
                  {
                     &amp;quot;altitude&amp;quot; : &amp;quot;1800&amp;quot;,
                     &amp;quot;longitude&amp;quot; : &amp;quot;-122.3072&amp;quot;,
                     &amp;quot;groundSpeed&amp;quot; : &amp;quot;187&amp;quot;,
                     &amp;quot;latitude&amp;quot; : &amp;quot;47.42333&amp;quot;,
                     &amp;quot;timeOver&amp;quot; : &amp;quot;1483985305&amp;quot;,
                     &amp;quot;sequence&amp;quot; : &amp;quot;4&amp;quot;
                  },
                  //...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Anyway, this is all retrievable without paying for the Gogo wifi; just a way to keep you entertained during the flight.&lt;/p&gt;
&lt;/section&gt;&lt;footer class="post-footer"&gt;&lt;section class="author"&gt;&lt;h4&gt;Christopher Kruse&lt;/h4&gt;&lt;p&gt;AWS Engineer, puzzle/board game addict, choir singer, and a teller of terrible puns.&lt;/p&gt;&lt;/section&gt;&lt;section class="share"&gt;&lt;span class="share-twitter"&gt;&lt;h4&gt;Share this post&lt;/h4&gt;&lt;a class="icon-twitter" href="https://twitter.com/share?text=&amp;amp;url=http://www.ballpointcarrot.net/posts/tracking-while-you-gogo.html" onclick=="window.open(this.href, &amp;apos;twitter-share&amp;apos;, &amp;apos;width=550,height=235&amp;apos;);return false;"&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Twitter&lt;/span&gt;&lt;/span&gt;&lt;span class="share-fb"&gt;&lt;a class="icon-facebook" href="https://www.facebook.com/sharer/sharer.php?u=http://www.ballpointcarrot.net/posts/tracking-while-you-gogo.html" onclick="window.open(this.href, &amp;apos;facebook-share&amp;apos;,&amp;apos;width=580,height=296&amp;apos;);return false;"&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Facebook&lt;/span&gt;&lt;/span&gt;&lt;span class="share-reddit"&gt;&lt;a class="icon-reddit" href="" onclick=""&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Reddit&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/footer&gt;&lt;/article&gt;&lt;/main&gt;&lt;footer class="site-footer"&gt;&lt;a class="subscribe icon-feed" href="http://www.ballpointcarrot.net/atom.xml"&gt;&lt;span class="tooltip"&gt;Subscribe!&lt;/span&gt;&lt;/a&gt;&lt;div class="inner h-card"&gt;&lt;div&gt;I'm &lt;span class="p-name"&gt;Christopher Kruse&lt;/span&gt;.&lt;/div&gt;&lt;ul class="web-identity"&gt;&lt;li&gt;&lt;a class="u-url" href="https://twitter.com/ballpointcarrot" rel="me" target="_blank"&gt;Twitter&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-url" href="https://social.ballpointcarrot.net/@ballpointcarrot" rel="me" target="_blank"&gt;Mastodon&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-url" href="https://github.com/ballpointcarrot" rel="me" target="_blank"&gt;Github&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-email" href="mailto:ckruse@ballpointcarrot.net" target="_blank"&gt;email&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="inner"&gt;&lt;section class="copyright"&gt;All content copyright &lt;a href="http://www.ballpointcarrot.net/"&gt;Ballpointcarrot.net&lt;/a&gt; &amp;copy; 2017 &amp;bull; All rights reserved.&lt;/section&gt;&lt;/div&gt;&lt;/footer&gt;&lt;script src="/assets/js/index.js" type="text/javascript"&gt;&lt;/script&gt;&lt;script src="/assets/js/prism.js" type="text/javascript"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>Christopher Kruse</name><email>ckruse@ballpointcarrot.net</email></author><category term="airplanes"></category><category term="Programming"></category><category term="fun"></category></entry><entry><id>urn:uuid:f9bd8517-8c44-4eb9-aaed-28336d7eec60</id><title>Exploring Nixos</title><link href="http://www.ballpointcarrot.net/posts/exploring-nixos.html" type="text/html" title="Exploring Nixos" rel="alternate"></link><published>2016-02-01T00:00:00Z</published><updated>2016-02-01T00:00:00Z</updated><content type="html" xml:base="http://www.ballpointcarrot.net/posts/exploring-nixos.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0" name="viewport"&gt;&lt;meta content="Thoughts and ramblings of Christopher Kruse, a software engineer based in Seattle, WA." name="description"&gt;&lt;link href="/assets/css/screen.css" rel="stylesheet" type="text/css"&gt;&lt;link href="//fonts.googleapis.com/css?family=Noto+Serif:400,700,400italic%7COpen+Sans:700,400" rel="stylesheet" type="text/css"&gt;&lt;link href="/assets/css/prism.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;body class="post-template"&gt;&lt;main class="content" role="main"&gt;&lt;header class="post-header"&gt;&lt;a class="blog-logo" href="http://www.ballpointcarrot.net/"&gt;&lt;span class="blog-title"&gt;Ballpointcarrot.net&lt;/span&gt;&lt;/a&gt;&lt;/header&gt;&lt;article class="post h-entry"&gt;&lt;span class="post-meta"&gt;&lt;time class="dt-published" datetime="Sun, 31 Jan 2016"&gt;&lt;a href="http://www.ballpointcarrot.net/posts/exploring-nixos.html"&gt;Sun, 31 Jan 2016&lt;/a&gt;&lt;/time&gt;&lt;div class="tags"&gt;&lt;a class="p-category" href="/tags/Tools.html" style="padding: 0 0.5rem 0 0;"&gt;Tools&lt;/a&gt;&lt;a class="p-category" href="/tags/Metablog.html" style="padding: 0 0.5rem 0 0;"&gt;Metablog&lt;/a&gt;&lt;a class="p-category" href="/tags/Systems.html" style="padding: 0 0.5rem 0 0;"&gt;Systems&lt;/a&gt;&lt;a class="p-category" href="/tags/Linux.html" style="padding: 0 0.5rem 0 0;"&gt;Linux&lt;/a&gt;&lt;/div&gt;&lt;/span&gt;&lt;h1 class="post-title p-name"&gt;Exploring Nixos&lt;/h1&gt;&lt;section class="post-content e-content"&gt;&lt;p&gt;Late-ish last year (around November, if memory serves), I read about a new OS project which allowed its users a stark departure from traditional Linux methods. Called &lt;a href="http://nixos.org"&gt;Nixos&lt;/a&gt;, the unique claim that it brought to the table was that the system configuration was managed declaratively, through functional configuration files. This includes things like package management, services executed, and user configuration.&lt;/p&gt;
&lt;p&gt;To fit along with my foray into the world of functional programming (my &lt;a href="/posts/rust-non-systems-programmer"&gt;jumps&lt;/a&gt; into &lt;a href="/posts/rust-nsp-matchers"&gt;Rust&lt;/a&gt; starting a mental shift, and recent dives into &lt;a href="http://clojure.org/"&gt;Clojure&lt;/a&gt; sealing the deal), I wanted to give it a shot. There were a couple of strong draws for me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Defining a configuration for everything leads me to be able to port my configs from place to place&lt;/li&gt;
&lt;li&gt;The comfort to screw up; that is, the ability to roll back in case things got weird&lt;/li&gt;
&lt;li&gt;A new learning experience - it&amp;rsquo;s been a long time since I&amp;rsquo;ve installed something new just to give it a shot.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I finally made the jump around mid-December, so I&amp;rsquo;ve been on it on my laptop for about a month and a half. Not constantly, but enough that I could make the configuration my own, and start to find out where things have been good, and what still needs to improve (both my understanding of Nixos and in the system).&lt;/p&gt;
&lt;h2&gt;&lt;a href="#packaging-and-installation" id="packaging-and-installation"&gt;&lt;/a&gt;Packaging and Installation&lt;/h2&gt;
&lt;p&gt;Nixos provides an ISO from their website, as is often the case with linux distros. The only qualm that I had in this stage is that, because I wanted to do a &lt;a href="https://nixos.org/wiki/Installing_NixOS_from_a_USB_stick"&gt;UEFI installation via USB&lt;/a&gt;, I had to jump through a few extra hoops in order to get things working correctly. This is less of a problem with Nixos specifically, and more endemic to the linux community as a whole - we need to make UEFI boot media easier to create. I miss the days of &lt;code&gt;dd if=&amp;lt;iso&amp;gt; of=&amp;lt;flash-drive&amp;gt;&lt;/code&gt;. :)&lt;/p&gt;
&lt;p&gt;I was pleasantly surprised to see that you could boot into a graphical environment using the boot media. This is something that some &lt;a href="https://www.archlinux.org/"&gt;major distributions&lt;/a&gt; still seem to miss, and I was impressed to see a relatively young distro include a UI, even if it didn&amp;rsquo;t handle the installation that way. At the very least, it gives you a sense of &amp;ldquo;try before you buy.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The initial read-through of the &lt;a href="http://nixos.org/nixos/manual/index.html#sec-installation"&gt;Nixos Manual&lt;/a&gt; were useful, but sparse in places where more information (particularly for a new user) would have been helpful. As you can see, the first 9 steps are pretty straightforward - hard disk setup, loading options for runtime, etc.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Then there&amp;rsquo;s step 10.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Edit this file&amp;rdquo; has a lot of openness to it. They do give you some resources around here (links to detailed configuration docs, a very barebones initial config, and links to &amp;ldquo;real-world installations&amp;rdquo; to compare to), but as your first foray into the format of the configuration.nix file, I would have &lt;strong&gt;loved&lt;/strong&gt; a &amp;ldquo;guided tour&amp;rdquo; here, giving insight into why the file structure is how it is, common configuration options for particular installation types, and a more &amp;ldquo;this is a normal base installation&amp;rdquo; config instead of the bare config provided in the manual.&lt;/p&gt;
&lt;p&gt;In my mind, this is where &lt;em&gt;the magic&lt;/em&gt; of Nixos happens - the documentation should highlight the magic, calling out its importance and showcasing how the features work. Imagine my surprise (and delight!) when I found I could enable xorg with a single line:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lang-plaintext"&gt;services.xserver.displayManager.sddm.enable = true; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Having fast, impacting implementations of large swaths of software fed through because a single option was enabled? Again, that&amp;rsquo;s &lt;em&gt;magic&lt;/em&gt;, and that&amp;rsquo;s what needs advertised here.&lt;/p&gt;
&lt;p&gt;Other first-order-of-business options for me at installation are things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adjusting the keyboard layout (Dvorak)&lt;/li&gt;
&lt;li&gt;Setting timezone and verifying current time (with optional NTP)&lt;/li&gt;
&lt;li&gt;laptop configuration (thinkpad module, touchpad config)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These were all fairly easy to find though the nixos wiki - when you&amp;rsquo;ve had other users run into the same configurations, it&amp;rsquo;s always nice to have them easy to find.&lt;/p&gt;
&lt;p&gt;The rest of the installation was a breeze - you run nixos-install, set your root password at the end, and then reboot into your new OS.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#using-it" id="using-it"&gt;&lt;/a&gt;Using it&lt;/h2&gt;
&lt;p&gt;Now I had a base working system, and it only took me a few generations of building and rebooting. After about generation 6-7 or so, I had things down to where I liked them for a start. From here, it was time to dig into what I could do with it.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#getting-comfortable" id="getting-comfortable"&gt;&lt;/a&gt;Getting comfortable&amp;hellip;&lt;/h3&gt;
&lt;p&gt;My laptop is used for a couple of things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Internet browsing&lt;/li&gt;
&lt;li&gt;Programming projects&lt;/li&gt;
&lt;li&gt;Photo editing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Setting up to get these tasks done wasn&amp;rsquo;t terribly hard. However, a &lt;em&gt;Really Cool Thing™&lt;/em&gt; about Nixos is that you can do these &lt;em&gt;per user&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let me reiterate that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Package installation can be done at the per-user level!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That&amp;rsquo;s huge in my mind, for multiple reasons. First, I&amp;rsquo;m sure I&amp;rsquo;m not the only one who will end up using this laptop. In the event that I need to &lt;em&gt;share&lt;/em&gt;, this gives me a way to keep my configuration and structure completely isolated from another users, where I can have only the things I want installed for me. In addition, I don&amp;rsquo;t have to muck about with installing everything system-wide, so I don&amp;rsquo;t have to use the shared folders (and &lt;code&gt;sudo&lt;/code&gt; calls everywhere) to do it. Finally, I like to configure tools in ways that could be confusing to others. This way, I can not only have the tool&amp;rsquo;s configuration, but &lt;em&gt;the tool itself&lt;/em&gt; in my user account.&lt;/p&gt;
&lt;p&gt;In an effort to unite the ability to do this with the Nixos &amp;ldquo;declarative by nature&amp;rdquo; package management, &lt;code&gt;nix-env&lt;/code&gt; was born:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lang-plaintext"&gt;$ nix-env -qaP nitrogen       # a package for setting wallpapers for non-standard WMs.
nixos.nitrogen        nitrogen-1.5.2
nixos-15.09.nitrogen  nitrogen-1.5.2

$ nix-env -i nitrogen         # to install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The end result is that the package has been added to the user environment, and a reference to the package has been added to the user manifest inside of their Nix profile. As an odd side-effect of how nix packages are stored, take a look at my system $PATH variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lang-plaintext"&gt;$ echo $PATH 
/home/ckruse/bin:/var/setuid-wrappers:/home/ckruse/.nix-profile/bin:/home/ckruse/.nix-profile/sbin:/home/ckruse/.nix-profile/lib/kde4/libexec:/nix/var/nix/profiles/default/bin:/nix/var/nix/profiles/default/sbin:/nix/var/nix/profiles/default/lib/kde4/libexec:/run/current-system/sw/bin:/run/current-system/sw/sbin:/run/current-system/sw/lib/kde4/libexec
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looking through that, you&amp;rsquo;ll see the conspicuous absence of our friends in &lt;code&gt;/bin&lt;/code&gt;, &lt;code&gt;/usr/bin&lt;/code&gt;, and &lt;code&gt;/usr/local/bin&lt;/code&gt;. These directories aren&amp;rsquo;t used - instead, packages get built in their own compartmentalized sections, and then are symlinked into the running context (system-wide, at &lt;code&gt;/run/current-system/sw/bin&lt;/code&gt;, and for each user, at &lt;code&gt;/home/&amp;lt;user&amp;gt;/.nix-profile/bin&lt;/code&gt;). This is awesome for generating your environments while in the nix context, but it can have some troubles.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#and-uncomfortable" id="and-uncomfortable"&gt;&lt;/a&gt;&amp;hellip;and uncomfortable&lt;/h3&gt;
&lt;p&gt;About 2 weeks ago, I wanted to sit down and create this very blog post, detailing the experiences that I had with migrating things over. I mentioned this &lt;a href="/posts/yearly-refresh-time"&gt;in the past&lt;/a&gt;, but my blog posts are generated code based on Harp, a NodeJS static site generator.&lt;/p&gt;
&lt;p&gt;In the past, I used to manage my node installations with the wonderful &lt;a href="https://github.com/creationix/nvm"&gt;nvm&lt;/a&gt; version manager, a set of shell scripts which shim versions of node to be used. However, this spectacularly failed with my Nixos installation. Versions of node installed via nvm did not have access to runtime libs that they would need, and so proper symlinking and running of these node versions failed, and failed hard.&lt;/p&gt;
&lt;p&gt;While stuck with this problem, I realized I could settle for using the system-provided Node version. However, this led to its own problems, because now we have two separate package managers (nix and npm). There is &lt;a href="http://blog.lastlog.de/posts/nodejs_on_nixos_status/"&gt;a push&lt;/a&gt; to incorporate npm packages into nix using the npm2nix utility, but I feel that, especially given separate development projects have their own dependency manifests, this is a step in the wrong direction.&lt;/p&gt;
&lt;p&gt;As a separate method to approach this problem, I read up on &lt;a href=""&gt;creating separate script profiles&lt;/a&gt; for running your development projects in. I thought, &amp;ldquo;Great! I&amp;rsquo;ll spin this up with the system node.js, install harp, and run with it.&amp;rdquo; Unfortunately, the harp install fell through, because I didn&amp;rsquo;t have write access to the global install directory for node (as I shouldn&amp;rsquo;t, because then the implementation leaks out into the package build).&lt;/p&gt;
&lt;p&gt;For now, I&amp;rsquo;m using a separate dev host + ssh to update here. I&amp;rsquo;ll want to dig into this further to see if I can get a good solution figured out. As of now, I know that &lt;code&gt;npm install -g &amp;lt;whatever&amp;gt;&lt;/code&gt; isn&amp;rsquo;t a good idea. Now I either find a better way (Docker could be a fun insert here), I change the blog backend again, or I wipe and start with a fresh installation of &amp;ldquo;new distro ++&amp;rdquo;.&lt;/p&gt;
&lt;/section&gt;&lt;footer class="post-footer"&gt;&lt;section class="author"&gt;&lt;h4&gt;Christopher Kruse&lt;/h4&gt;&lt;p&gt;AWS Engineer, puzzle/board game addict, choir singer, and a teller of terrible puns.&lt;/p&gt;&lt;/section&gt;&lt;section class="share"&gt;&lt;span class="share-twitter"&gt;&lt;h4&gt;Share this post&lt;/h4&gt;&lt;a class="icon-twitter" href="https://twitter.com/share?text=&amp;amp;url=http://www.ballpointcarrot.net/posts/exploring-nixos.html" onclick=="window.open(this.href, &amp;apos;twitter-share&amp;apos;, &amp;apos;width=550,height=235&amp;apos;);return false;"&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Twitter&lt;/span&gt;&lt;/span&gt;&lt;span class="share-fb"&gt;&lt;a class="icon-facebook" href="https://www.facebook.com/sharer/sharer.php?u=http://www.ballpointcarrot.net/posts/exploring-nixos.html" onclick="window.open(this.href, &amp;apos;facebook-share&amp;apos;,&amp;apos;width=580,height=296&amp;apos;);return false;"&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Facebook&lt;/span&gt;&lt;/span&gt;&lt;span class="share-reddit"&gt;&lt;a class="icon-reddit" href="" onclick=""&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Reddit&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/footer&gt;&lt;/article&gt;&lt;/main&gt;&lt;footer class="site-footer"&gt;&lt;a class="subscribe icon-feed" href="http://www.ballpointcarrot.net/atom.xml"&gt;&lt;span class="tooltip"&gt;Subscribe!&lt;/span&gt;&lt;/a&gt;&lt;div class="inner h-card"&gt;&lt;div&gt;I'm &lt;span class="p-name"&gt;Christopher Kruse&lt;/span&gt;.&lt;/div&gt;&lt;ul class="web-identity"&gt;&lt;li&gt;&lt;a class="u-url" href="https://twitter.com/ballpointcarrot" rel="me" target="_blank"&gt;Twitter&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-url" href="https://social.ballpointcarrot.net/@ballpointcarrot" rel="me" target="_blank"&gt;Mastodon&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-url" href="https://github.com/ballpointcarrot" rel="me" target="_blank"&gt;Github&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-email" href="mailto:ckruse@ballpointcarrot.net" target="_blank"&gt;email&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="inner"&gt;&lt;section class="copyright"&gt;All content copyright &lt;a href="http://www.ballpointcarrot.net/"&gt;Ballpointcarrot.net&lt;/a&gt; &amp;copy; 2017 &amp;bull; All rights reserved.&lt;/section&gt;&lt;/div&gt;&lt;/footer&gt;&lt;script src="/assets/js/index.js" type="text/javascript"&gt;&lt;/script&gt;&lt;script src="/assets/js/prism.js" type="text/javascript"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>Christopher Kruse</name><email>ckruse@ballpointcarrot.net</email></author><category term="Tools"></category><category term="Metablog"></category><category term="Systems"></category><category term="Linux"></category></entry><entry><id>urn:uuid:59cac4cf-8590-42bb-8027-9bb608bf404b</id><title>I'm Still Here / Careless Copying</title><link href="http://www.ballpointcarrot.net/posts/im-still-here.html" type="text/html" title="I'm Still Here / Careless Copying" rel="alternate"></link><published>2015-09-09T00:00:00Z</published><updated>2015-09-09T00:00:00Z</updated><content type="html" xml:base="http://www.ballpointcarrot.net/posts/im-still-here.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0" name="viewport"&gt;&lt;meta content="Thoughts and ramblings of Christopher Kruse, a software engineer based in Seattle, WA." name="description"&gt;&lt;link href="/assets/css/screen.css" rel="stylesheet" type="text/css"&gt;&lt;link href="//fonts.googleapis.com/css?family=Noto+Serif:400,700,400italic%7COpen+Sans:700,400" rel="stylesheet" type="text/css"&gt;&lt;link href="/assets/css/prism.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;body class="post-template"&gt;&lt;main class="content" role="main"&gt;&lt;header class="post-header"&gt;&lt;a class="blog-logo" href="http://www.ballpointcarrot.net/"&gt;&lt;span class="blog-title"&gt;Ballpointcarrot.net&lt;/span&gt;&lt;/a&gt;&lt;/header&gt;&lt;article class="post h-entry"&gt;&lt;span class="post-meta"&gt;&lt;time class="dt-published" datetime="Tue, 8 Sep 2015"&gt;&lt;a href="http://www.ballpointcarrot.net/posts/im-still-here.html"&gt;Tue, 8 Sep 2015&lt;/a&gt;&lt;/time&gt;&lt;div class="tags"&gt;&lt;a class="p-category" href="/tags/Metablog.html" style="padding: 0 0.5rem 0 0;"&gt;Metablog&lt;/a&gt;&lt;a class="p-category" href="/tags/Systems.html" style="padding: 0 0.5rem 0 0;"&gt;Systems&lt;/a&gt;&lt;a class="p-category" href="/tags/Whoops.html" style="padding: 0 0.5rem 0 0;"&gt;Whoops&lt;/a&gt;&lt;/div&gt;&lt;/span&gt;&lt;h1 class="post-title p-name"&gt;I'm Still Here / Careless Copying&lt;/h1&gt;&lt;section class="post-content e-content"&gt;&lt;p&gt;I&amp;rsquo;ve identified that a considerable time has gone by since the last update. I&amp;rsquo;m going to put some adequate time into resolving that this month and into the future. I&amp;rsquo;ve been sitting on a couple of topics that I want to dig into (regarding how I handle &lt;a href="http://notmuchmail.org"&gt;email&lt;/a&gt; and some work I&amp;rsquo;ve been doing with &lt;a href="http://clojure.org"&gt;Clojure&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In the interim, I&amp;rsquo;ll leave you with a little anecdote/tale of caution.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;My wife and I (oh yeah, by the way, I got married in April. I really need to work on updates.) frequently play video games together to pass the time. I&amp;rsquo;m not normally terribly competitive, and she&amp;rsquo;s not into the traditional multiplayer model of games, so I try to look for games we can play that are multiplayer co-op, or more turn-based (I&amp;rsquo;ve gotten us both hopelessly addicted to &lt;a href="http://www.civilization.com/"&gt;Civilization&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Recently, with a lapse in new ideas for games, we bought her a copy of &lt;a href="http://store.steampowered.com/sub/32848/"&gt;Borderlands 2 on Steam&lt;/a&gt; so that we could play through the storyline together. I had played shortly after it came out, and with friends both in the Midwest and in the PNW, so I had a number of game saves on my desktop.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Complication #1&lt;/em&gt;: When we play games, normally Jordan gets the desktop, so that she has a better experience with the game. Having already played it, I get relegated to my laptop (running integrated Intel graphics) when I play along.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Complication #2&lt;/em&gt;:  The group that did the porting of the game to Linux (&lt;a href="http://www.aspyr.com/"&gt;Aspyr Media&lt;/a&gt;, who should get amazing credit for their work in extending video games to the Linux world) does not allow for Steam Cloud saves to cross platforms. As such, I had no access to the work I&amp;rsquo;ve put into the game previously.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;We come to the events of tonight.&lt;/p&gt;
&lt;p&gt;Jordan is away on a work trip, and Christopher is home alone. Christopher decides, &amp;ldquo;Hey, it&amp;rsquo;s been forever since I&amp;rsquo;ve actually gotten to use my desktop for games, and I&amp;rsquo;ve been playing BL2 recently; let&amp;rsquo;s play that.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;An hour passes as Christopher enjoys playing one of his old characters, which is close in level to where he&amp;rsquo;s at with Jordan.&lt;/p&gt;
&lt;p&gt;Christopher: &amp;ldquo;Hey - I should see if I can copy over the character data to the laptop, so I have the option to play with those characters when Jordan gets back.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;After researching, Christopher finds that the character data is saved in files called &lt;code&gt;save&amp;lt;nnnn&amp;gt;.sav&lt;/code&gt;. Easy enough to copy from one location to the next.&lt;/p&gt;
&lt;p&gt;Christopher copies the save data to a shared filesystem so he can access it on his laptop, and then fires off the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-language-bash"&gt;cp save*.sav ~/.local/share/aspyr-media/borderlands 2/willowgame/savedata/&amp;lt;numerical id&amp;gt;/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After thinking about this, Christopher realizes in horror that &lt;em&gt;he&amp;rsquo;s just saved over his character data he&amp;rsquo;s been playing with his wife for the majority of the last week&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Because the &lt;code&gt;cp&lt;/code&gt; command doesn&amp;rsquo;t default the &lt;code&gt;-i/--interactive&lt;/code&gt; option, which would prompt on overwrite, it is easy to fall into this trap. In my case, both game saves were named &amp;ldquo;save0001.sav&amp;rdquo;, and the &lt;code&gt;cp&lt;/code&gt; call replaced my character data with the old one.&lt;/p&gt;
&lt;p&gt;I scoured the Internet for methods of data recovery (there&amp;rsquo;s a &lt;a href="http://superuser.com/questions/211301/recovery-of-overwritten-file"&gt;really&lt;/a&gt; &lt;a href="http://unix.stackexchange.com/a/150423"&gt;cool&lt;/a&gt; &lt;a href="http://unix.stackexchange.com/questions/101237/how-to-recover-files-i-deleted-now-by-running-rm"&gt;tangent&lt;/a&gt; to take here on how mv/rm/cp actually behave), and most things I found referred to using text contained in the file to find the details. That&amp;rsquo;d be great, but the data files for those characters are &lt;a href="http://gaming.stackexchange.com/a/84732"&gt;encrypted&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Fortunately (for me), this story has a happy ending. Borderlands 2 has support for &lt;a href="https://en.wikipedia.org/wiki/Steam_%28software%29#cite_ref-39"&gt;Steam Cloud&lt;/a&gt;. As a last-ditch effort, I removed &lt;em&gt;all&lt;/em&gt; save data from the folder on the laptop, and restarted the game. Upon loading, it detected a game save within Steam Cloud that didn&amp;rsquo;t exist locally, and happily copied that save down to the local machine. I&amp;rsquo;m even more pleased to say that it was a recent save to, so I didn&amp;rsquo;t lose my place!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;So, the moral of today&amp;rsquo;s story: make sure you use (or better yet, alias) cp to &lt;code&gt;cp -i&lt;/code&gt;, so that when you write to a directory, you pause before overwriting.&lt;/p&gt;
&lt;/section&gt;&lt;footer class="post-footer"&gt;&lt;section class="author"&gt;&lt;h4&gt;Christopher Kruse&lt;/h4&gt;&lt;p&gt;AWS Engineer, puzzle/board game addict, choir singer, and a teller of terrible puns.&lt;/p&gt;&lt;/section&gt;&lt;section class="share"&gt;&lt;span class="share-twitter"&gt;&lt;h4&gt;Share this post&lt;/h4&gt;&lt;a class="icon-twitter" href="https://twitter.com/share?text=&amp;amp;url=http://www.ballpointcarrot.net/posts/im-still-here.html" onclick=="window.open(this.href, &amp;apos;twitter-share&amp;apos;, &amp;apos;width=550,height=235&amp;apos;);return false;"&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Twitter&lt;/span&gt;&lt;/span&gt;&lt;span class="share-fb"&gt;&lt;a class="icon-facebook" href="https://www.facebook.com/sharer/sharer.php?u=http://www.ballpointcarrot.net/posts/im-still-here.html" onclick="window.open(this.href, &amp;apos;facebook-share&amp;apos;,&amp;apos;width=580,height=296&amp;apos;);return false;"&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Facebook&lt;/span&gt;&lt;/span&gt;&lt;span class="share-reddit"&gt;&lt;a class="icon-reddit" href="" onclick=""&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Reddit&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/footer&gt;&lt;/article&gt;&lt;/main&gt;&lt;footer class="site-footer"&gt;&lt;a class="subscribe icon-feed" href="http://www.ballpointcarrot.net/atom.xml"&gt;&lt;span class="tooltip"&gt;Subscribe!&lt;/span&gt;&lt;/a&gt;&lt;div class="inner h-card"&gt;&lt;div&gt;I'm &lt;span class="p-name"&gt;Christopher Kruse&lt;/span&gt;.&lt;/div&gt;&lt;ul class="web-identity"&gt;&lt;li&gt;&lt;a class="u-url" href="https://twitter.com/ballpointcarrot" rel="me" target="_blank"&gt;Twitter&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-url" href="https://social.ballpointcarrot.net/@ballpointcarrot" rel="me" target="_blank"&gt;Mastodon&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-url" href="https://github.com/ballpointcarrot" rel="me" target="_blank"&gt;Github&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-email" href="mailto:ckruse@ballpointcarrot.net" target="_blank"&gt;email&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="inner"&gt;&lt;section class="copyright"&gt;All content copyright &lt;a href="http://www.ballpointcarrot.net/"&gt;Ballpointcarrot.net&lt;/a&gt; &amp;copy; 2017 &amp;bull; All rights reserved.&lt;/section&gt;&lt;/div&gt;&lt;/footer&gt;&lt;script src="/assets/js/index.js" type="text/javascript"&gt;&lt;/script&gt;&lt;script src="/assets/js/prism.js" type="text/javascript"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>Christopher Kruse</name><email>ckruse@ballpointcarrot.net</email></author><category term="Metablog"></category><category term="Systems"></category><category term="Whoops"></category></entry><entry><id>urn:uuid:c444380d-4ebc-4c5f-b96c-20a49d1f631c</id><title>Rust (part 2 of n): 'match' and Tuples</title><link href="http://www.ballpointcarrot.net/posts/rust-nsp-matchers.html" type="text/html" title="Rust (part 2 of n): 'match' and Tuples" rel="alternate"></link><published>2015-03-14T00:00:00Z</published><updated>2015-03-14T00:00:00Z</updated><content type="html" xml:base="http://www.ballpointcarrot.net/posts/rust-nsp-matchers.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0" name="viewport"&gt;&lt;meta content="Thoughts and ramblings of Christopher Kruse, a software engineer based in Seattle, WA." name="description"&gt;&lt;link href="/assets/css/screen.css" rel="stylesheet" type="text/css"&gt;&lt;link href="//fonts.googleapis.com/css?family=Noto+Serif:400,700,400italic%7COpen+Sans:700,400" rel="stylesheet" type="text/css"&gt;&lt;link href="/assets/css/prism.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;body class="post-template"&gt;&lt;main class="content" role="main"&gt;&lt;header class="post-header"&gt;&lt;a class="blog-logo" href="http://www.ballpointcarrot.net/"&gt;&lt;span class="blog-title"&gt;Ballpointcarrot.net&lt;/span&gt;&lt;/a&gt;&lt;/header&gt;&lt;article class="post h-entry"&gt;&lt;span class="post-meta"&gt;&lt;time class="dt-published" datetime="Fri, 13 Mar 2015"&gt;&lt;a href="http://www.ballpointcarrot.net/posts/rust-nsp-matchers.html"&gt;Fri, 13 Mar 2015&lt;/a&gt;&lt;/time&gt;&lt;div class="tags"&gt;&lt;a class="p-category" href="/tags/rust.html" style="padding: 0 0.5rem 0 0;"&gt;rust&lt;/a&gt;&lt;a class="p-category" href="/tags/Programming.html" style="padding: 0 0.5rem 0 0;"&gt;Programming&lt;/a&gt;&lt;/div&gt;&lt;/span&gt;&lt;h1 class="post-title p-name"&gt;Rust (part 2 of n): 'match' and Tuples&lt;/h1&gt;&lt;section class="post-content e-content"&gt;&lt;p&gt;In order to keep practicing and make sure I keep sharp on what I&amp;rsquo;m learning, I like to dig through problem sets and write solutions for them. At first, the best resource for these was &lt;a href="https://projecteuler.net"&gt;Project Euler&lt;/a&gt;, but as time went on, new projects came about that presented problems in slightly different ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://codewars.com"&gt;Codewars&lt;/a&gt; gamifies the process a bit, by rating the difficulty of each item; those determine the amount of credit you get by solving them.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://codekata.com"&gt;CodeKata&lt;/a&gt;, which is more of an exercise in repeated solutions to common problems, with the understanding that the repeated practice, you become better over time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most recently, I&amp;rsquo;ve been running through problems on Reddit&amp;rsquo;s &lt;a href="http://reddit.com/r/dailyprogrammer"&gt;DailyProgrammer&lt;/a&gt; subreddit. These are community-submitted challenges, separated into easy, medium, and difficult problems. Each of these problems can extend within themselves to offer more flexibility or allow the user more options.&lt;/p&gt;
&lt;p&gt;Today, I had the opportunity to work on the &lt;a href="http://www.reddit.com/r/dailyprogrammer/comments/2ygsxs/20150309_challenge_205_easy_friendly_date_ranges/"&gt;most recent &amp;lsquo;easy&amp;rsquo; DailyProgrammer challenge&lt;/a&gt;. In it, when provided two separate dates, you need to make a pretty printout of the range between them. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lang-plaintext"&gt;2015-03-14, 2015-03-15 =&amp;gt; March 14th - 15th
2015-03-14, 2016-02-28 =&amp;gt; March 14th - February 28th
2015-03-14, 2016-03-15 =&amp;gt; March 14th, 2015 - March 15th, 2016
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Within the set values, you&amp;rsquo;ll notice that years can be omitted when they match the current year, but only within a year&amp;rsquo;s time. In addition, within a single month, you don&amp;rsquo;t need to print out the month twice (the value is inferred).&lt;/p&gt;
&lt;h3&gt;&lt;a href="#rust-match" id="rust-match"&gt;&lt;/a&gt;Rust: &amp;lsquo;match&amp;rsquo;&lt;/h3&gt;
&lt;p&gt;During my solution to this problem, I had two problems to solve:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How do I handle the ordinal values (1st, 2nd, 3rd, etc.) for the dates?&lt;/li&gt;
&lt;li&gt;How do I compare the dates from the original strings to determine the output?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For both, Rust has some strong utilities for helping with the solution. To solve the ordinal issue, rust provides a &amp;lsquo;match&amp;rsquo; keyword, which acts as a more flexible form of most languages&amp;rsquo; switch/case statements. Within it, we can set matching values, or matching ranges of values, in order to retrieve what we&amp;rsquo;re looking for.&lt;/p&gt;
&lt;p&gt;In this case, we need 1st, 2nd, and 3rd to be unique, and 4 -&amp;gt; 20 to use &amp;lsquo;th&amp;rsquo; (think about it&amp;hellip; 11th, 12th, &amp;hellip;). However, we then reach 21, and that ends up using an &amp;lsquo;st&amp;rsquo; again. Since our problem only concerns itself with days of a month, we can limit ourselves to an upper bound of 31, as the example below shows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lang-rust"&gt;fn ordinal(value: usize) -&amp;gt; Option&amp;lt;String&amp;gt; {
    match value {
        0 =&amp;gt; Some(String::from_str(&amp;quot;th&amp;quot;)),
        1 =&amp;gt; Some(String::from_str(&amp;quot;st&amp;quot;)),
        2 =&amp;gt; Some(String::from_str(&amp;quot;nd&amp;quot;)),
        3 =&amp;gt; Some(String::from_str(&amp;quot;rd&amp;quot;)),
        4...20 =&amp;gt; Some(String::from_str(&amp;quot;th&amp;quot;)),
        21...31 =&amp;gt; ordinal(value % 10),
        _ =&amp;gt; None
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some things to point out from the example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the fifth matcher uses a range from 4 to 20 inclusive, and will respond with a &amp;lsquo;th&amp;rsquo;. This satisfies the requirement for the teens.&lt;/li&gt;
&lt;li&gt;the sixth matcher removes the tens place from the value, and recurses. when it responds, it will have the matcher for just that last place, which fulfilles the rule of 21, 22, etc.&lt;/li&gt;
&lt;li&gt;the last matcher is a &lt;em&gt;catch-all&lt;/em&gt; or &lt;em&gt;don&amp;rsquo;t-care&lt;/em&gt; matcher; as we are unconcerned with the value, we just handle the case without the value. This will become more important in the next section.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another point of note here is that the function is returning an Option value - as discussed &lt;a href="/posts/rust-non-systems-programmer"&gt;in the last post&lt;/a&gt;, an Option value is used in situations where you are uncertain about the resultant value, in order to avoid a situation where &lt;code&gt;null&lt;/code&gt; would traditionally be used. Finally, the function does not have an explicit &lt;code&gt;return&lt;/code&gt; keyword, because the match is acting as an expression and not a statement. By omitting the semicolon, the selected match logic is returned on its own.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#rust-tuples" id="rust-tuples"&gt;&lt;/a&gt;Rust: Tuples&lt;/h3&gt;
&lt;p&gt;Now that we have the ordinal solved, we can go about formatting the actual output. In order to do so, we need to compare the values of the dates to find the differences between them (less than a month, less than a year, more than a year, etc.). In order to solve this, I arranged the date properties into a &lt;em&gt;tuple&lt;/em&gt; - a structure with multiple data points within it.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lang-rust"&gt;let (start_yr, start_mo, start_dy) = start_values[0], start_values[1], start_values[2];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tuples in Rust can be used in many ways; often, they&amp;rsquo;re used to provide multiple values as a return of a function, or to store data that is paired or grouped together (like (x,y) coordinates).&lt;/p&gt;
&lt;p&gt;My limited example above is referred to as a &lt;em&gt;destructuring&lt;/em&gt; of a tuple - it allows creation of multiple variables from the tuple they were defined from. In other words, I can now use &lt;code&gt;start_yr&lt;/code&gt; and &lt;code&gt;start_mo&lt;/code&gt; in my code in other spots.&lt;/p&gt;
&lt;p&gt;This example doesn&amp;rsquo;t show much of the power of what is being done, but watch what happens when you pair it with the &lt;code&gt;match&lt;/code&gt; statement from above:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lang-rust"&gt;match (end_yr-start_yr, (end_mo as isize)-(start_mo as isize), (end_dy as isize)-(start_dy as isize)) {
    (0, 0, 0) =&amp;gt; format!(&amp;quot;{} {}&amp;quot;,
                         MONTHS[start_mo-1],
                         print_ordinal(start_dy)),
    (0, 0, _) =&amp;gt; format!(&amp;quot;{} {} - {}&amp;quot;,
                         MONTHS[start_mo-1],
                         print_ordinal(start_dy),
                         print_ordinal(end_dy)),
    (0, _, _) =&amp;gt; format!(&amp;quot;{} {} - {} {}&amp;quot;,
                         MONTHS[start_mo-1],
                         print_ordinal(start_dy),
                         MONTHS[end_mo-1],
                         print_ordinal(end_dy)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we generate a tuple that acts as the difference between the year, month, and day values. Given the assumption that our ranges move forward in time, we present three cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The start and end days are the same. In this case, just print the month and day (you don&amp;rsquo;t need to print the end day, as it&amp;rsquo;s the same).&lt;/li&gt;
&lt;li&gt;The difference of the start and end month and year are both zero. In this case, we&amp;rsquo;re within the same month, so we don&amp;rsquo;t need to print it twice. Instead, we print the range between the start and end day.&lt;/li&gt;
&lt;li&gt;The year is the same, but we have two different months. In this case, print both months and days.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notice that we don&amp;rsquo;t care about what values we have in the month and day. In a situation where we &lt;em&gt;need&lt;/em&gt; that calculation, we can assign variables to it, as well:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lang-rust"&gt;    (1, month, day) =&amp;gt; {
        let use_yr = match (0.cmp(&amp;amp;month) , 0.cmp(&amp;amp;day)) {
            (Ordering::Greater, _) =&amp;gt; false,
            (Ordering::Equal, Ordering::Greater) =&amp;gt; false,
            (_,_) =&amp;gt; true
        };
        if use_yr {
            format!(&amp;quot;{} {}, {} - {} {}, {}&amp;quot;,
                    MONTHS[start_mo-1],
                    print_ordinal(start_dy),
                    start_yr,
                    MONTHS[end_mo-1],
                    print_ordinal(end_dy),
                    end_yr)
        } else {
            format!(&amp;quot;{} {} - {} {}&amp;quot;,
                    MONTHS[start_mo-1],
                    print_ordinal(start_dy),
                    MONTHS[end_mo-1],
                    print_ordinal(end_dy))
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we need to know the difference between month and day, as the year changed. However, if the month difference is less than zero (eg: from 2015-12-01 to 2016-03-01), then the year is assumed to be changing, and not printed. By extension, we will do the same with the date (eg: 2015-12-31 -&amp;gt; 2016-12-25).&lt;/p&gt;
&lt;p&gt;We capture those differences from the matcher in the month and day variables, and then use those to make further determinations in the matcher&amp;rsquo;s block. First, we figure out if we are using the year, based on the conditions above. Then, we choose a format for the date based on if we&amp;rsquo;re using the year.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#testing" id="testing"&gt;&lt;/a&gt;Testing&lt;/h3&gt;
&lt;p&gt;Rust includes a strong preprocessor, which will examine and selectively compile parts of your code. Based on this, you can keep your unit tests contained within your source file, and they will only be compiled when you run in a test configuration (usually using &amp;lsquo;cargo test&amp;rsquo;).&lt;/p&gt;
&lt;p&gt;You can find the crate for my solution &lt;a href="https://github.com/ballpointcarrot/rust-dailyprogrammer/tree/205"&gt;on my github repository&lt;/a&gt;. Note that there are different branches - I&amp;rsquo;ll hopefully add more solutions to new branches for each problem that&amp;rsquo;s solved.&lt;/p&gt;
&lt;/section&gt;&lt;footer class="post-footer"&gt;&lt;section class="author"&gt;&lt;h4&gt;Christopher Kruse&lt;/h4&gt;&lt;p&gt;AWS Engineer, puzzle/board game addict, choir singer, and a teller of terrible puns.&lt;/p&gt;&lt;/section&gt;&lt;section class="share"&gt;&lt;span class="share-twitter"&gt;&lt;h4&gt;Share this post&lt;/h4&gt;&lt;a class="icon-twitter" href="https://twitter.com/share?text=&amp;amp;url=http://www.ballpointcarrot.net/posts/rust-nsp-matchers.html" onclick=="window.open(this.href, &amp;apos;twitter-share&amp;apos;, &amp;apos;width=550,height=235&amp;apos;);return false;"&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Twitter&lt;/span&gt;&lt;/span&gt;&lt;span class="share-fb"&gt;&lt;a class="icon-facebook" href="https://www.facebook.com/sharer/sharer.php?u=http://www.ballpointcarrot.net/posts/rust-nsp-matchers.html" onclick="window.open(this.href, &amp;apos;facebook-share&amp;apos;,&amp;apos;width=580,height=296&amp;apos;);return false;"&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Facebook&lt;/span&gt;&lt;/span&gt;&lt;span class="share-reddit"&gt;&lt;a class="icon-reddit" href="" onclick=""&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Reddit&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/footer&gt;&lt;/article&gt;&lt;/main&gt;&lt;footer class="site-footer"&gt;&lt;a class="subscribe icon-feed" href="http://www.ballpointcarrot.net/atom.xml"&gt;&lt;span class="tooltip"&gt;Subscribe!&lt;/span&gt;&lt;/a&gt;&lt;div class="inner h-card"&gt;&lt;div&gt;I'm &lt;span class="p-name"&gt;Christopher Kruse&lt;/span&gt;.&lt;/div&gt;&lt;ul class="web-identity"&gt;&lt;li&gt;&lt;a class="u-url" href="https://twitter.com/ballpointcarrot" rel="me" target="_blank"&gt;Twitter&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-url" href="https://social.ballpointcarrot.net/@ballpointcarrot" rel="me" target="_blank"&gt;Mastodon&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-url" href="https://github.com/ballpointcarrot" rel="me" target="_blank"&gt;Github&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-email" href="mailto:ckruse@ballpointcarrot.net" target="_blank"&gt;email&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="inner"&gt;&lt;section class="copyright"&gt;All content copyright &lt;a href="http://www.ballpointcarrot.net/"&gt;Ballpointcarrot.net&lt;/a&gt; &amp;copy; 2017 &amp;bull; All rights reserved.&lt;/section&gt;&lt;/div&gt;&lt;/footer&gt;&lt;script src="/assets/js/index.js" type="text/javascript"&gt;&lt;/script&gt;&lt;script src="/assets/js/prism.js" type="text/javascript"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>Christopher Kruse</name><email>ckruse@ballpointcarrot.net</email></author><category term="rust"></category><category term="Programming"></category></entry><entry><id>urn:uuid:59d13391-c5dc-4a1a-be04-ddaa9429010c</id><title>Rust, by a non-systems programmer (Part 1 of n)</title><link href="http://www.ballpointcarrot.net/posts/rust-non-systems-programmer.html" type="text/html" title="Rust, by a non-systems programmer (Part 1 of n)" rel="alternate"></link><published>2015-03-08T00:00:00Z</published><updated>2015-03-08T00:00:00Z</updated><content type="html" xml:base="http://www.ballpointcarrot.net/posts/rust-non-systems-programmer.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0" name="viewport"&gt;&lt;meta content="Thoughts and ramblings of Christopher Kruse, a software engineer based in Seattle, WA." name="description"&gt;&lt;link href="/assets/css/screen.css" rel="stylesheet" type="text/css"&gt;&lt;link href="//fonts.googleapis.com/css?family=Noto+Serif:400,700,400italic%7COpen+Sans:700,400" rel="stylesheet" type="text/css"&gt;&lt;link href="/assets/css/prism.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;body class="post-template"&gt;&lt;main class="content" role="main"&gt;&lt;header class="post-header"&gt;&lt;a class="blog-logo" href="http://www.ballpointcarrot.net/"&gt;&lt;span class="blog-title"&gt;Ballpointcarrot.net&lt;/span&gt;&lt;/a&gt;&lt;/header&gt;&lt;article class="post h-entry"&gt;&lt;span class="post-meta"&gt;&lt;time class="dt-published" datetime="Sat, 7 Mar 2015"&gt;&lt;a href="http://www.ballpointcarrot.net/posts/rust-non-systems-programmer.html"&gt;Sat, 7 Mar 2015&lt;/a&gt;&lt;/time&gt;&lt;div class="tags"&gt;&lt;a class="p-category" href="/tags/rust.html" style="padding: 0 0.5rem 0 0;"&gt;rust&lt;/a&gt;&lt;a class="p-category" href="/tags/Programming.html" style="padding: 0 0.5rem 0 0;"&gt;Programming&lt;/a&gt;&lt;/div&gt;&lt;/span&gt;&lt;h1 class="post-title p-name"&gt;Rust, by a non-systems programmer (Part 1 of n)&lt;/h1&gt;&lt;section class="post-content e-content"&gt;&lt;p&gt;I&amp;rsquo;ve been working on trying to teach myself Rust for the past 4 months or so. It&amp;rsquo;s been slow-going, because I&amp;rsquo;m having to teach myself things that would have been common knowledge for anyone with previous experience doing systems-level programming in C or C++. Instead, this will be more or less of a brain dump of a rubyist that is picking up some systems-level knowledge.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#string-io" id="string-io"&gt;&lt;/a&gt;String I/O&lt;/h2&gt;
&lt;p&gt;Coming from a scripting language like Ruby, basic string input and output is fairly straightforward:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lang-ruby"&gt;puts &amp;quot;How old are you?&amp;quot;
age = gets.strip
puts &amp;quot;You've said #{age} years, which is #{(age.to_i*365.25).to_i} days.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rust, this becomes significantly more involved:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lang-rust"&gt;#![feature(old_io)]
use std::old_io::stdin;
use std::str::FromStr;

fn main() {
    println!(&amp;quot;How old are you?&amp;quot;);
    let mut input = match stdin().read_line() {
        Ok(v) =&amp;gt; v,
        Err(_) =&amp;gt; panic!(&amp;quot;Couldn't get STDIN!&amp;quot;)
    };
    input = input.trim()
    let age_days:usize = match FromStr::from_str(input.trim()) {
        Ok(v) =&amp;gt; (v * 365.25) as usize,
        Err(_) =&amp;gt; panic!(&amp;quot;Couldn't convert to usize!&amp;quot;)
    };

    println!(&amp;quot;You've said {} years, which is {} days&amp;quot;, input.trim(), age_days)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rust, the placement of the variable in stack or heap memory is important to the Rust compiler&amp;rsquo;s understanding of&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how long the variable lives (it&amp;rsquo;s &amp;ldquo;lifetime&amp;rdquo;), and&lt;/li&gt;
&lt;li&gt;who owns the memory that the variable uses (the &amp;ldquo;ownership&amp;rdquo;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are &lt;a href="https://doc.rust-lang.org/book/ownership.html"&gt;plenty&lt;/a&gt; &lt;a href="http://rustbyexample.com/move.html"&gt;of&lt;/a&gt; &lt;a href="https://doc.rust-lang.org/book/strings.html"&gt;posts&lt;/a&gt; &lt;a href="http://nercury.github.io/rust/guide/2015/01/19/ownership.html"&gt;available&lt;/a&gt; which will explain these terms to enough detail; for practical purposes, we have to manage two separate types of strings. Each type gets used in subtly different ways, but will cause you some problems when building out programs.&lt;/p&gt;
&lt;p&gt;The more commonly used string type is &lt;code&gt;&amp;amp;str&lt;/code&gt;, also known as the &amp;ldquo;string slice&amp;rdquo;. This string is allocated to the stack, and is accessed through a reference to the stored string, much like a C-like character array.&lt;/p&gt;
&lt;p&gt;The second string type, &lt;code&gt;String&lt;/code&gt;, is used when you want to maintain ownership over the string value. &lt;code&gt;String&lt;/code&gt;s are allocated on the heap, and are &amp;ldquo;growable&amp;rdquo; - that is, they can be added to as mutable variables.&lt;/p&gt;
&lt;p&gt;Be careful to understand what type of string you&amp;rsquo;ll be dealing with; functions generally operate on the more general &lt;code&gt;&amp;amp;str&lt;/code&gt; type, so you may need to convert back and forth between the two types with &lt;code&gt;String::as_slice&lt;/code&gt; or &lt;code&gt;&amp;quot;&amp;quot;.to_string()&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#handling-input-possibilities" id="handling-input-possibilities"&gt;&lt;/a&gt;Handling input possibilities&lt;/h3&gt;
&lt;p&gt;Because Rust does not have a built-in concept of &amp;ldquo;null&amp;rdquo;, you cannot assign a non-guaranteed value to a variable. Instead, Rust provides the Result type, which wraps the successful value in an &lt;code&gt;Ok()&lt;/code&gt;-wrapped response; otherwise, an error will be provided with the relevant error details.&lt;/p&gt;
&lt;p&gt;This means that reads from &lt;code&gt;STDIN&lt;/code&gt; will be quite a bit more verbose than you&amp;rsquo;re used to, but the compiler now forces the checking of invalid situations for a value, which can take more off of your mind.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#changing-io-library" id="changing-io-library"&gt;&lt;/a&gt;Changing I/O Library&lt;/h3&gt;
&lt;p&gt;One of the last changes to the Rust Standard Library was an overhaul of the IO subsystem. Most documentation (including the official docs) request that you continue to use &lt;code&gt;std::old_io&lt;/code&gt; until the overhaul is complete.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#memory-management" id="memory-management"&gt;&lt;/a&gt;Memory Management&lt;/h2&gt;
&lt;p&gt;One of the larges differences between the two languages is the presence/absence of a Garbage Collector. In Ruby (and other GC&amp;rsquo;d languages), the GC is used to clean up expired references from the runtime, to periodically free unused memory from the application being run.&lt;/p&gt;
&lt;p&gt;In Rust, there is no GC. Instead, the compiler has a notion of &amp;ldquo;ownership,&amp;rdquo; as we discussed earlier. Check out the following snippet:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lang-rust"&gt;    let x = Box::new(5);
    {   
        let y = x;
    }   

    println!(&amp;quot;x == {}&amp;quot;, x); 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In line 1, we create a new heap-allocated variable, and store 5 into it. Because it&amp;rsquo;s on the heap, the value of x is really a pointer to the memory location of the &amp;ldquo;Box&amp;rdquo; - the owned variable. Now, in line 3, we create the variable y, and store x&amp;rsquo;s value into it; this is considered by the Rust compiler to be a &amp;ldquo;move&amp;rdquo; - both pointers point to the data, but rust treats y as the new owner of the Box, as x has transferred ownership. Because of this, line 6 fails to compile correctly, as the value owner has been moved:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lang-plaintext"&gt;src/main.rs:7:25: 7:26 error: use of moved value: `x`
src/main.rs:7     println!(&amp;quot;x == {}&amp;quot;, x);
                                      ^
note: in expansion of format_args!
&amp;lt;std macros&amp;gt;:2:43: 2:76 note: expansion site
&amp;lt;std macros&amp;gt;:1:1: 2:78 note: in expansion of println!
src/main.rs:7:5: 7:28 note: expansion site
src/main.rs:4:13: 4:14 note: `x` moved here because it has type `Box&amp;lt;i32&amp;gt;`, which is moved by default
src/main.rs:4         let y = x;
                          ^
src/main.rs:4:14: 4:14 help: use `ref` to override
error: aborting due to previous error
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because of this, you need to keep track of what values you&amp;rsquo;re using where, who&amp;rsquo;s got the ownership of the value, and how long the value is alive.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#documentation" id="documentation"&gt;&lt;/a&gt;Documentation!&lt;/h2&gt;
&lt;p&gt;This will be something that comes with more use and more exposure, but right now, outside of the &lt;a href="http://doc.rust-lang.org/"&gt;Rust standard documentation&lt;/a&gt;, there isn&amp;rsquo;t much for explanations on how/where to do things is, in comparison to the Ruby ecosystem on the Internet. As I get more into it, I&amp;rsquo;m hoping to have more posts like this, where I can go into greater detail on how to do things in a rust-like way.&lt;/p&gt;
&lt;p&gt;Moving into Systems programming is weird for me; I know there&amp;rsquo;s some things that I&amp;rsquo;m missing, and I have a lot more power to play around with the system at a lower level, but I struggle with finding projects to work on. Either I choose something substantially big, or it ends up being examples on &lt;a href="http://reddit.com/r/dailyprogrammer"&gt;/r/dailyprogrammer&lt;/a&gt;. I&amp;rsquo;d like to put together something in the middle soon.&lt;/p&gt;
&lt;/section&gt;&lt;footer class="post-footer"&gt;&lt;section class="author"&gt;&lt;h4&gt;Christopher Kruse&lt;/h4&gt;&lt;p&gt;AWS Engineer, puzzle/board game addict, choir singer, and a teller of terrible puns.&lt;/p&gt;&lt;/section&gt;&lt;section class="share"&gt;&lt;span class="share-twitter"&gt;&lt;h4&gt;Share this post&lt;/h4&gt;&lt;a class="icon-twitter" href="https://twitter.com/share?text=&amp;amp;url=http://www.ballpointcarrot.net/posts/rust-non-systems-programmer.html" onclick=="window.open(this.href, &amp;apos;twitter-share&amp;apos;, &amp;apos;width=550,height=235&amp;apos;);return false;"&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Twitter&lt;/span&gt;&lt;/span&gt;&lt;span class="share-fb"&gt;&lt;a class="icon-facebook" href="https://www.facebook.com/sharer/sharer.php?u=http://www.ballpointcarrot.net/posts/rust-non-systems-programmer.html" onclick="window.open(this.href, &amp;apos;facebook-share&amp;apos;,&amp;apos;width=580,height=296&amp;apos;);return false;"&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Facebook&lt;/span&gt;&lt;/span&gt;&lt;span class="share-reddit"&gt;&lt;a class="icon-reddit" href="" onclick=""&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Reddit&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/footer&gt;&lt;/article&gt;&lt;/main&gt;&lt;footer class="site-footer"&gt;&lt;a class="subscribe icon-feed" href="http://www.ballpointcarrot.net/atom.xml"&gt;&lt;span class="tooltip"&gt;Subscribe!&lt;/span&gt;&lt;/a&gt;&lt;div class="inner h-card"&gt;&lt;div&gt;I'm &lt;span class="p-name"&gt;Christopher Kruse&lt;/span&gt;.&lt;/div&gt;&lt;ul class="web-identity"&gt;&lt;li&gt;&lt;a class="u-url" href="https://twitter.com/ballpointcarrot" rel="me" target="_blank"&gt;Twitter&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-url" href="https://social.ballpointcarrot.net/@ballpointcarrot" rel="me" target="_blank"&gt;Mastodon&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-url" href="https://github.com/ballpointcarrot" rel="me" target="_blank"&gt;Github&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-email" href="mailto:ckruse@ballpointcarrot.net" target="_blank"&gt;email&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="inner"&gt;&lt;section class="copyright"&gt;All content copyright &lt;a href="http://www.ballpointcarrot.net/"&gt;Ballpointcarrot.net&lt;/a&gt; &amp;copy; 2017 &amp;bull; All rights reserved.&lt;/section&gt;&lt;/div&gt;&lt;/footer&gt;&lt;script src="/assets/js/index.js" type="text/javascript"&gt;&lt;/script&gt;&lt;script src="/assets/js/prism.js" type="text/javascript"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>Christopher Kruse</name><email>ckruse@ballpointcarrot.net</email></author><category term="rust"></category><category term="Programming"></category></entry><entry><id>urn:uuid:562817a0-8399-4abb-b7c5-4ee3a119f36b</id><title>Yearly Refresh Time!</title><link href="http://www.ballpointcarrot.net/posts/yearly-refresh-time.html" type="text/html" title="Yearly Refresh Time!" rel="alternate"></link><published>2015-02-28T00:00:00Z</published><updated>2015-02-28T00:00:00Z</updated><content type="html" xml:base="http://www.ballpointcarrot.net/posts/yearly-refresh-time.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0" name="viewport"&gt;&lt;meta content="Thoughts and ramblings of Christopher Kruse, a software engineer based in Seattle, WA." name="description"&gt;&lt;link href="/assets/css/screen.css" rel="stylesheet" type="text/css"&gt;&lt;link href="//fonts.googleapis.com/css?family=Noto+Serif:400,700,400italic%7COpen+Sans:700,400" rel="stylesheet" type="text/css"&gt;&lt;link href="/assets/css/prism.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;body class="post-template"&gt;&lt;main class="content" role="main"&gt;&lt;header class="post-header"&gt;&lt;a class="blog-logo" href="http://www.ballpointcarrot.net/"&gt;&lt;span class="blog-title"&gt;Ballpointcarrot.net&lt;/span&gt;&lt;/a&gt;&lt;/header&gt;&lt;article class="post h-entry"&gt;&lt;span class="post-meta"&gt;&lt;time class="dt-published" datetime="Fri, 27 Feb 2015"&gt;&lt;a href="http://www.ballpointcarrot.net/posts/yearly-refresh-time.html"&gt;Fri, 27 Feb 2015&lt;/a&gt;&lt;/time&gt;&lt;div class="tags"&gt;&lt;a class="p-category" href="/tags/Metablog.html" style="padding: 0 0.5rem 0 0;"&gt;Metablog&lt;/a&gt;&lt;/div&gt;&lt;/span&gt;&lt;h1 class="post-title p-name"&gt;Yearly Refresh Time!&lt;/h1&gt;&lt;section class="post-content e-content"&gt;&lt;p&gt;I don&amp;rsquo;t know if it&amp;rsquo;s the digital form of spring cleaning, or if there&amp;rsquo;s a standing need to clean things up and keep them looking nicely, but I found it time this weekend to update the visual and functional aspects of my blog. With that being said, welcome to ballpointcarrot.net, version&amp;hellip;4, I think?  I haven&amp;rsquo;t done a terribly good job of keeping an active archive, and haven&amp;rsquo;t consulted the Internet Archive to see if they have any of the previous iterations.&lt;/p&gt;
&lt;p&gt;With the new layout comes a new backend engine for producing the contents - I&amp;rsquo;ve moved from Octopress (which, while nice, dictated a structure and tooling a little more than necessary) to a Node.js static site generator called &lt;a href="http://harpjs.com/"&gt;Harp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Because this is a site generator first, the structure used for blog-like things, such as tags, feeds, etc. come as extras; It took a little bit of searching to find a theme and pattern I liked, and still didn&amp;rsquo;t fit 100%. Fortunately, because of the flexibility provided, I adjusted the structure of how data was read and inserted, and made it truly my own.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#about-the-new-platform" id="about-the-new-platform"&gt;&lt;/a&gt;About the new platform&lt;/h2&gt;
&lt;p&gt;As I mentioned, the base of the new platform is Harp. The &lt;a href="https://github.com/kennethormandy/hb-casper"&gt;base theme&lt;/a&gt; is a port of &lt;a href="https://github.com/TryGhost/Casper"&gt;Casper&lt;/a&gt;, which is the default theme for the &lt;a href="https://ghost.org/"&gt;Ghost&lt;/a&gt; blogging platform. In addition, I&amp;rsquo;ve added a more flexible syntax highlighting library called &lt;a href="http://prismjs.com/"&gt;Prism&lt;/a&gt; to help with code snippets (which I&amp;rsquo;ll be able to use more frequently, I&amp;rsquo;m hoping!).&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lang-javascript"&gt;christopher.blog_upgrade = true;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Overall, the site is still set to run on GitHub Pages; I appreciate that they allow hosting like that, and moreover, allow the Hostname redirection that they do.&lt;/p&gt;
&lt;p&gt;Migration of the actual data from the old platform to the new one worked pretty well. As they say, the best knowledge transfer medium is plain text. No reading from databases, no conversions; just a little bit of modification of the markdown files in one platform to the other.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#now-the-question-will-he-keep-updating-it" id="now-the-question-will-he-keep-updating-it"&gt;&lt;/a&gt;Now the question - &lt;em&gt;will he keep updating it?&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;That will remain to be seen. I had a goal of writing every two days; we saw how well that went. But, I&amp;rsquo;ve been working on teaching myself new things in the intervening time, and I think it may prove to be good not just for me, but for people reading, to start putting my thoughts to paper, so to speak.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m cautiously optimistic that I can do a better job of updating things. We&amp;rsquo;ll see if I can make a pattern out of it.&lt;/p&gt;
&lt;/section&gt;&lt;footer class="post-footer"&gt;&lt;section class="author"&gt;&lt;h4&gt;Christopher Kruse&lt;/h4&gt;&lt;p&gt;AWS Engineer, puzzle/board game addict, choir singer, and a teller of terrible puns.&lt;/p&gt;&lt;/section&gt;&lt;section class="share"&gt;&lt;span class="share-twitter"&gt;&lt;h4&gt;Share this post&lt;/h4&gt;&lt;a class="icon-twitter" href="https://twitter.com/share?text=&amp;amp;url=http://www.ballpointcarrot.net/posts/yearly-refresh-time.html" onclick=="window.open(this.href, &amp;apos;twitter-share&amp;apos;, &amp;apos;width=550,height=235&amp;apos;);return false;"&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Twitter&lt;/span&gt;&lt;/span&gt;&lt;span class="share-fb"&gt;&lt;a class="icon-facebook" href="https://www.facebook.com/sharer/sharer.php?u=http://www.ballpointcarrot.net/posts/yearly-refresh-time.html" onclick="window.open(this.href, &amp;apos;facebook-share&amp;apos;,&amp;apos;width=580,height=296&amp;apos;);return false;"&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Facebook&lt;/span&gt;&lt;/span&gt;&lt;span class="share-reddit"&gt;&lt;a class="icon-reddit" href="" onclick=""&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Reddit&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/footer&gt;&lt;/article&gt;&lt;/main&gt;&lt;footer class="site-footer"&gt;&lt;a class="subscribe icon-feed" href="http://www.ballpointcarrot.net/atom.xml"&gt;&lt;span class="tooltip"&gt;Subscribe!&lt;/span&gt;&lt;/a&gt;&lt;div class="inner h-card"&gt;&lt;div&gt;I'm &lt;span class="p-name"&gt;Christopher Kruse&lt;/span&gt;.&lt;/div&gt;&lt;ul class="web-identity"&gt;&lt;li&gt;&lt;a class="u-url" href="https://twitter.com/ballpointcarrot" rel="me" target="_blank"&gt;Twitter&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-url" href="https://social.ballpointcarrot.net/@ballpointcarrot" rel="me" target="_blank"&gt;Mastodon&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-url" href="https://github.com/ballpointcarrot" rel="me" target="_blank"&gt;Github&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-email" href="mailto:ckruse@ballpointcarrot.net" target="_blank"&gt;email&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="inner"&gt;&lt;section class="copyright"&gt;All content copyright &lt;a href="http://www.ballpointcarrot.net/"&gt;Ballpointcarrot.net&lt;/a&gt; &amp;copy; 2017 &amp;bull; All rights reserved.&lt;/section&gt;&lt;/div&gt;&lt;/footer&gt;&lt;script src="/assets/js/index.js" type="text/javascript"&gt;&lt;/script&gt;&lt;script src="/assets/js/prism.js" type="text/javascript"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>Christopher Kruse</name><email>ckruse@ballpointcarrot.net</email></author><category term="Metablog"></category></entry><entry><id>urn:uuid:836ecc09-747c-4ddd-a704-26d0a20406bc</id><title>Tooling Around</title><link href="http://www.ballpointcarrot.net/posts/tooling-around.html" type="text/html" title="Tooling Around" rel="alternate"></link><published>2014-05-23T00:00:00Z</published><updated>2014-05-23T00:00:00Z</updated><content type="html" xml:base="http://www.ballpointcarrot.net/posts/tooling-around.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0" name="viewport"&gt;&lt;meta content="Thoughts and ramblings of Christopher Kruse, a software engineer based in Seattle, WA." name="description"&gt;&lt;link href="/assets/css/screen.css" rel="stylesheet" type="text/css"&gt;&lt;link href="//fonts.googleapis.com/css?family=Noto+Serif:400,700,400italic%7COpen+Sans:700,400" rel="stylesheet" type="text/css"&gt;&lt;link href="/assets/css/prism.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;body class="post-template"&gt;&lt;main class="content" role="main"&gt;&lt;header class="post-header"&gt;&lt;a class="blog-logo" href="http://www.ballpointcarrot.net/"&gt;&lt;span class="blog-title"&gt;Ballpointcarrot.net&lt;/span&gt;&lt;/a&gt;&lt;/header&gt;&lt;article class="post h-entry"&gt;&lt;span class="post-meta"&gt;&lt;time class="dt-published" datetime="Thu, 22 May 2014"&gt;&lt;a href="http://www.ballpointcarrot.net/posts/tooling-around.html"&gt;Thu, 22 May 2014&lt;/a&gt;&lt;/time&gt;&lt;div class="tags"&gt;&lt;a class="p-category" href="/tags/email.html" style="padding: 0 0.5rem 0 0;"&gt;email&lt;/a&gt;&lt;a class="p-category" href="/tags/emacs.html" style="padding: 0 0.5rem 0 0;"&gt;emacs&lt;/a&gt;&lt;a class="p-category" href="/tags/linux.html" style="padding: 0 0.5rem 0 0;"&gt;linux&lt;/a&gt;&lt;/div&gt;&lt;/span&gt;&lt;h1 class="post-title p-name"&gt;Tooling Around&lt;/h1&gt;&lt;section class="post-content e-content"&gt;&lt;p&gt;So, I traded in my work laptop today to replace it with a new one. I&amp;rsquo;m glad I made the switch, as there were things that I didn&amp;rsquo;t need on the old one, and I didn&amp;rsquo;t want to have to mess with a major upgrade path and the inevitable breaks that were to come with it. Additionally, my workflow and suite of tools works better with the new hardware (I&amp;rsquo;ve switched to an Ubuntu laptop from an OSX one), and it will centralize my daily work (email and communication, scheduling and planning) around the laptop instead of the desktop, which can then be devoted to other tasks (like running development projects).&lt;/p&gt;
&lt;p&gt;Because of the switch, it got me to thinking about the tooling that I use on a daily basis, and how to most smoothly move into getting that installed on a new system. Replacing hardware is tough work for a developer/engineer, and that would be time otherwise spent working on problems or creating new things. I&amp;rsquo;m going to provide a rundown of my toolchain and how I orchestrate the installation of the tools.&lt;/p&gt;
&lt;p&gt;Note that, as this is tied to Linux, the tools will obviously be Linux-based. There are different flows for other OSs; each ecosystem operates differently. This is my solution for myself; YMMV.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#communication" id="communication"&gt;&lt;/a&gt;Communication&lt;/h2&gt;
&lt;p&gt;Being able to send and receive messages is key. Ten minutes after receiving my laptop today, I had a meeting that I had to run to, and to send an email containing some details to one of the attendees. I run my email from the office Exchange server to my desktop (and now the laptop) using &lt;a href="http://fetchmail.berlios.de/"&gt;fetchmail&lt;/a&gt; and &lt;a href="http://www.procmail.org/"&gt;procmail&lt;/a&gt;. While these may seem esoteric, and not terribly user-friendly, it gives me a strength that no other email client has - I can run scripts around my email. Procmail handles the filtering of the incoming fetchmail setup, and separates the email into the various folders for easy filtering rules (based on sender, topic in subject, etc.). Emails sent specifically to me in the To: header get a bit more prevalence, and emails with calendar invites as attachments get the attachment parsed and sent to a calendar. Since everything was using a standard Maildir format for storage on the laptop, migrating the email was as easy as running rsync between the two systems.&lt;/p&gt;
&lt;p&gt;This covers only the receipt of email, not sending. Since December (referencing &lt;a href="http://www.ballpointcarrot.net/blog/2014/02/07/learning-a-new-editor/"&gt;an earlier post&lt;/a&gt;), I&amp;rsquo;ve been using Emacs to do more and more things - this has grown to include IRC chat (via the &lt;a href="http://www.emacswiki.org/wiki/ERC"&gt;ERC&lt;/a&gt; plugin) and email (using a pair of utilities called &lt;a href="http://www.djcbsoftware.nl/code/mu/mu4e.html"&gt;mu and mu4e&lt;/a&gt;). While normally I&amp;rsquo;d entertain jokes here (like &amp;ldquo;emacs is a good OS, it just needs a decent text editor.&amp;rdquo;), I have to say that it&amp;rsquo;s handy to have a single place to go for all the work you need to do. mu is external to Emacs, and is a search engine over your Maildir folders; you can use it on the command line to pick out emails that pertain to certain topics, and filter them by specific recipients and whether they&amp;rsquo;re new/flagged/unread/etc. Mu4e wraps that logic in an easy to use mail client from within Emacs, and it&amp;rsquo;s been much nicer than sifting through Outlook.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#environment" id="environment"&gt;&lt;/a&gt;Environment&lt;/h2&gt;
&lt;p&gt;So I&amp;rsquo;ve got some software&amp;hellip; now I have to customize what I run it in. Rather than stay with Unity (the default Ubuntu installed WM, which I frankly feel is counter-intuitive), I choose to go to a lesser known window manager called &lt;a href="http://awesome.naquadah.org/"&gt;&amp;ldquo;Awesome.&amp;rdquo;&lt;/a&gt; Appropriately named, as I haven&amp;rsquo;t left it since I found it. By using a tiling window manager, I don&amp;rsquo;t have to worry about resizing things to fit. Additionally, the entire interface is programmable via Lua, so defining custom shortcut keys and startup programs is fairly simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lua"&gt;    -- ...
    -- Hotkeys for handling window resizing and management:
    clientkeys = awful.util.table.join(
    awful.key({ modkey,           }, &amp;quot;f&amp;quot;,      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ modkey,           }, &amp;quot;q&amp;quot;,      function (c) c:kill()                         end),
    awful.key({ modkey, &amp;quot;Control&amp;quot; }, &amp;quot;space&amp;quot;,  awful.client.floating.toggle                     ),
    awful.key({ modkey, &amp;quot;Control&amp;quot; }, &amp;quot;Return&amp;quot;, function (c) c:swap(awful.client.getmaster()) end),
    awful.key({ modkey,           }, &amp;quot;o&amp;quot;,      awful.client.movetoscreen                        ),
    awful.key({ modkey, &amp;quot;Shift&amp;quot;   }, &amp;quot;r&amp;quot;,      function (c) c:redraw()                       end),
    awful.key({ modkey,           }, &amp;quot;t&amp;quot;,      function (c) c.ontop = not c.ontop            end),
    awful.key({ modkey,           }, &amp;quot;n&amp;quot;,
        function (c)
            -- The client currently has the input focus, so it cannot be
            -- minimized, since minimized clients can't have the focus.
            c.minimized = true
        end),
    awful.key({ modkey,           }, &amp;quot;m&amp;quot;,
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c.maximized_vertical   = not c.maximized_vertical
        end)
    )
    -- Autostarts
    awful.util.spawn_with_shell(&amp;quot;/usr/bin/startup-script.sh&amp;quot;)
    awful.util.spawn_with_shell(&amp;quot;~/bin/runme&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Awesome&amp;rsquo;s libraries have amusing names: &amp;ldquo;awful&amp;rdquo;, &amp;ldquo;naughty&amp;rdquo;, and &amp;ldquo;vicious&amp;rdquo;, to name a few. Currently, I have this attached to the GNOME session layer, so I get the benefit of GNOME&amp;rsquo;s background and icon management, but the window management of awesome.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#code" id="code"&gt;&lt;/a&gt;Code&lt;/h2&gt;
&lt;p&gt;A programmer can&amp;rsquo;t do much unless he has languages to write in. For me, that means having to add some additional packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/sstephenson/rbenv"&gt;rbenv&lt;/a&gt; - this manages various installations of Ruby and the ecosystem around it. Similar to RVM, this uses shim binaries to point to rotating Ruby versions, so that I can use one version with one app, and use a legacy version to work on an older one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/creationix/nvm"&gt;nvm&lt;/a&gt; - Same idea as rbenv, but for node.js. These libraries give me the flexibility of using different runtimes for different applications, and makes it easier to install the languages than with the system-provided binaries (which can either be out of date or harder to manage).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I&amp;rsquo;ve already mentioned it, but Emacs is in here, too. Being able to easily see language and typographical issues with flycheck, syntax highlighting for languages available via &lt;a href="https://github.com/dimitri/el-get"&gt;el-get&lt;/a&gt;, and being able to launch a simple shell within the editor to run a test is a blessing to getting things done.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="#tomorrow" id="tomorrow"&gt;&lt;/a&gt;Tomorrow&lt;/h2&gt;
&lt;p&gt;This was just for the first day, too. Things like browser plugins (which we use a myriad of for work) will likely come soon enough, and there will be tweaks to all of the stuff listed as what I need in the environment changes. Let me know if you have any questions on any of this, and I&amp;rsquo;ll do what I can to answer them.&lt;/p&gt;
&lt;/section&gt;&lt;footer class="post-footer"&gt;&lt;section class="author"&gt;&lt;h4&gt;Christopher Kruse&lt;/h4&gt;&lt;p&gt;AWS Engineer, puzzle/board game addict, choir singer, and a teller of terrible puns.&lt;/p&gt;&lt;/section&gt;&lt;section class="share"&gt;&lt;span class="share-twitter"&gt;&lt;h4&gt;Share this post&lt;/h4&gt;&lt;a class="icon-twitter" href="https://twitter.com/share?text=&amp;amp;url=http://www.ballpointcarrot.net/posts/tooling-around.html" onclick=="window.open(this.href, &amp;apos;twitter-share&amp;apos;, &amp;apos;width=550,height=235&amp;apos;);return false;"&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Twitter&lt;/span&gt;&lt;/span&gt;&lt;span class="share-fb"&gt;&lt;a class="icon-facebook" href="https://www.facebook.com/sharer/sharer.php?u=http://www.ballpointcarrot.net/posts/tooling-around.html" onclick="window.open(this.href, &amp;apos;facebook-share&amp;apos;,&amp;apos;width=580,height=296&amp;apos;);return false;"&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Facebook&lt;/span&gt;&lt;/span&gt;&lt;span class="share-reddit"&gt;&lt;a class="icon-reddit" href="" onclick=""&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Reddit&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/footer&gt;&lt;/article&gt;&lt;/main&gt;&lt;footer class="site-footer"&gt;&lt;a class="subscribe icon-feed" href="http://www.ballpointcarrot.net/atom.xml"&gt;&lt;span class="tooltip"&gt;Subscribe!&lt;/span&gt;&lt;/a&gt;&lt;div class="inner h-card"&gt;&lt;div&gt;I'm &lt;span class="p-name"&gt;Christopher Kruse&lt;/span&gt;.&lt;/div&gt;&lt;ul class="web-identity"&gt;&lt;li&gt;&lt;a class="u-url" href="https://twitter.com/ballpointcarrot" rel="me" target="_blank"&gt;Twitter&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-url" href="https://social.ballpointcarrot.net/@ballpointcarrot" rel="me" target="_blank"&gt;Mastodon&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-url" href="https://github.com/ballpointcarrot" rel="me" target="_blank"&gt;Github&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-email" href="mailto:ckruse@ballpointcarrot.net" target="_blank"&gt;email&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="inner"&gt;&lt;section class="copyright"&gt;All content copyright &lt;a href="http://www.ballpointcarrot.net/"&gt;Ballpointcarrot.net&lt;/a&gt; &amp;copy; 2017 &amp;bull; All rights reserved.&lt;/section&gt;&lt;/div&gt;&lt;/footer&gt;&lt;script src="/assets/js/index.js" type="text/javascript"&gt;&lt;/script&gt;&lt;script src="/assets/js/prism.js" type="text/javascript"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>Christopher Kruse</name><email>ckruse@ballpointcarrot.net</email></author><category term="email"></category><category term="emacs"></category><category term="linux"></category></entry><entry><id>urn:uuid:531f788f-771a-45d9-a044-0b9b38c830c4</id><title>Redesign, and Goals</title><link href="http://www.ballpointcarrot.net/posts/redesign-and-goals.html" type="text/html" title="Redesign, and Goals" rel="alternate"></link><published>2014-05-23T00:00:00Z</published><updated>2014-05-23T00:00:00Z</updated><content type="html" xml:base="http://www.ballpointcarrot.net/posts/redesign-and-goals.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0" name="viewport"&gt;&lt;meta content="Thoughts and ramblings of Christopher Kruse, a software engineer based in Seattle, WA." name="description"&gt;&lt;link href="/assets/css/screen.css" rel="stylesheet" type="text/css"&gt;&lt;link href="//fonts.googleapis.com/css?family=Noto+Serif:400,700,400italic%7COpen+Sans:700,400" rel="stylesheet" type="text/css"&gt;&lt;link href="/assets/css/prism.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;body class="post-template"&gt;&lt;main class="content" role="main"&gt;&lt;header class="post-header"&gt;&lt;a class="blog-logo" href="http://www.ballpointcarrot.net/"&gt;&lt;span class="blog-title"&gt;Ballpointcarrot.net&lt;/span&gt;&lt;/a&gt;&lt;/header&gt;&lt;article class="post h-entry"&gt;&lt;span class="post-meta"&gt;&lt;time class="dt-published" datetime="Thu, 22 May 2014"&gt;&lt;a href="http://www.ballpointcarrot.net/posts/redesign-and-goals.html"&gt;Thu, 22 May 2014&lt;/a&gt;&lt;/time&gt;&lt;div class="tags"&gt;&lt;a class="p-category" href="/tags/Metablog.html" style="padding: 0 0.5rem 0 0;"&gt;Metablog&lt;/a&gt;&lt;a class="p-category" href="/tags/Goals.html" style="padding: 0 0.5rem 0 0;"&gt;Goals&lt;/a&gt;&lt;/div&gt;&lt;/span&gt;&lt;h1 class="post-title p-name"&gt;Redesign, and Goals&lt;/h1&gt;&lt;section class="post-content e-content"&gt;&lt;h2&gt;&lt;a href="#new-site-layout" id="new-site-layout"&gt;&lt;/a&gt;New Site Layout!&lt;/h2&gt;
&lt;p&gt;Hey everyone! After taking time to look through and see what it would take to maintain the old ballpointcarrot.net site (residing on a mostly-dormant 1-dyno Heroku install), I&amp;rsquo;ve decided to forgo it and run everything on Octopress. Let me know if you have positives/negatives to say about the changes. I feel it&amp;rsquo;s a positive step, and it&amp;rsquo;s one less account to keep open for me. Bonus.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#goals" id="goals"&gt;&lt;/a&gt;Goals&lt;/h2&gt;
&lt;p&gt;I realize I don&amp;rsquo;t post much on here, so I want to set a goal for myself for new blog posts. So, starting today, until the end of June, I&amp;rsquo;ll strive to make a post every 2 days. You should expect to see something Friday. This will allow me to get some of my mind dumped out to the Internet, and expose my thinking to approaches for software. It will also give me time to put down things I&amp;rsquo;ve learned while working at AWS - expect a lot of the posts to be covering issues with CloudFormation, Elastic Beanstalk, Auto Scaling and more. Plus, I&amp;rsquo;ll probably have some talk on new JS frameworks, Docker, Ruby gotchas, and anything else I can think of.&lt;/p&gt;
&lt;p&gt;I still should be pretty reachable via the site - the sidebar for posts has my G+, Twitter and email nearby to click on. I&amp;rsquo;ve also added Disqus comments below, so let me know what you think of the new layout, and my future content.&lt;/p&gt;
&lt;/section&gt;&lt;footer class="post-footer"&gt;&lt;section class="author"&gt;&lt;h4&gt;Christopher Kruse&lt;/h4&gt;&lt;p&gt;AWS Engineer, puzzle/board game addict, choir singer, and a teller of terrible puns.&lt;/p&gt;&lt;/section&gt;&lt;section class="share"&gt;&lt;span class="share-twitter"&gt;&lt;h4&gt;Share this post&lt;/h4&gt;&lt;a class="icon-twitter" href="https://twitter.com/share?text=&amp;amp;url=http://www.ballpointcarrot.net/posts/redesign-and-goals.html" onclick=="window.open(this.href, &amp;apos;twitter-share&amp;apos;, &amp;apos;width=550,height=235&amp;apos;);return false;"&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Twitter&lt;/span&gt;&lt;/span&gt;&lt;span class="share-fb"&gt;&lt;a class="icon-facebook" href="https://www.facebook.com/sharer/sharer.php?u=http://www.ballpointcarrot.net/posts/redesign-and-goals.html" onclick="window.open(this.href, &amp;apos;facebook-share&amp;apos;,&amp;apos;width=580,height=296&amp;apos;);return false;"&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Facebook&lt;/span&gt;&lt;/span&gt;&lt;span class="share-reddit"&gt;&lt;a class="icon-reddit" href="" onclick=""&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Reddit&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/footer&gt;&lt;/article&gt;&lt;/main&gt;&lt;footer class="site-footer"&gt;&lt;a class="subscribe icon-feed" href="http://www.ballpointcarrot.net/atom.xml"&gt;&lt;span class="tooltip"&gt;Subscribe!&lt;/span&gt;&lt;/a&gt;&lt;div class="inner h-card"&gt;&lt;div&gt;I'm &lt;span class="p-name"&gt;Christopher Kruse&lt;/span&gt;.&lt;/div&gt;&lt;ul class="web-identity"&gt;&lt;li&gt;&lt;a class="u-url" href="https://twitter.com/ballpointcarrot" rel="me" target="_blank"&gt;Twitter&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-url" href="https://social.ballpointcarrot.net/@ballpointcarrot" rel="me" target="_blank"&gt;Mastodon&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-url" href="https://github.com/ballpointcarrot" rel="me" target="_blank"&gt;Github&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-email" href="mailto:ckruse@ballpointcarrot.net" target="_blank"&gt;email&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="inner"&gt;&lt;section class="copyright"&gt;All content copyright &lt;a href="http://www.ballpointcarrot.net/"&gt;Ballpointcarrot.net&lt;/a&gt; &amp;copy; 2017 &amp;bull; All rights reserved.&lt;/section&gt;&lt;/div&gt;&lt;/footer&gt;&lt;script src="/assets/js/index.js" type="text/javascript"&gt;&lt;/script&gt;&lt;script src="/assets/js/prism.js" type="text/javascript"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>Christopher Kruse</name><email>ckruse@ballpointcarrot.net</email></author><category term="Metablog"></category><category term="Goals"></category></entry><entry><id>urn:uuid:38def8ab-7d71-4d60-91dc-61bc85eca570</id><title>Learning a new Editor</title><link href="http://www.ballpointcarrot.net/posts/learning-a-new-editor.html" type="text/html" title="Learning a new Editor" rel="alternate"></link><published>2014-02-07T00:00:00Z</published><updated>2014-02-07T00:00:00Z</updated><content type="html" xml:base="http://www.ballpointcarrot.net/posts/learning-a-new-editor.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0" name="viewport"&gt;&lt;meta content="Thoughts and ramblings of Christopher Kruse, a software engineer based in Seattle, WA." name="description"&gt;&lt;link href="/assets/css/screen.css" rel="stylesheet" type="text/css"&gt;&lt;link href="//fonts.googleapis.com/css?family=Noto+Serif:400,700,400italic%7COpen+Sans:700,400" rel="stylesheet" type="text/css"&gt;&lt;link href="/assets/css/prism.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;body class="post-template"&gt;&lt;main class="content" role="main"&gt;&lt;header class="post-header"&gt;&lt;a class="blog-logo" href="http://www.ballpointcarrot.net/"&gt;&lt;span class="blog-title"&gt;Ballpointcarrot.net&lt;/span&gt;&lt;/a&gt;&lt;/header&gt;&lt;article class="post h-entry"&gt;&lt;span class="post-meta"&gt;&lt;time class="dt-published" datetime="Thu, 6 Feb 2014"&gt;&lt;a href="http://www.ballpointcarrot.net/posts/learning-a-new-editor.html"&gt;Thu, 6 Feb 2014&lt;/a&gt;&lt;/time&gt;&lt;div class="tags"&gt;&lt;a class="p-category" href="/tags/Programming.html" style="padding: 0 0.5rem 0 0;"&gt;Programming&lt;/a&gt;&lt;/div&gt;&lt;/span&gt;&lt;h1 class="post-title p-name"&gt;Learning a new Editor&lt;/h1&gt;&lt;section class="post-content e-content"&gt;&lt;h2&gt;&lt;a href="#background" id="background"&gt;&lt;/a&gt;Background&lt;/h2&gt;
&lt;p&gt;I often fall back to my (now well-worn) copy of &lt;a href="http://pragprog.com/book/tpp/the-pragmatic-programmer"&gt;The Pragmatic Programmer&lt;/a&gt; to take a look at things I can do to hone my abilities as a programmer. Recently, the two rules that have most recently hit me as things I haven&amp;rsquo;t put much focus on are &lt;em&gt;Invest Regularly in Your Knowledge Portfolio&lt;/em&gt;, and &lt;em&gt;There Are No Final Decisions&lt;/em&gt;. In a fit of Christmas downime enegry, I decided to incorporate these principles by taking myself out of my normal comfort zone, and cutting out one of my most widely used tools - vim.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been a vimmer for many years, and I&amp;rsquo;ve incorporated utilities passed down from greater minds than I (Tim Pope, the guys at Pivotal, etc.) and had become comfortable in how I used my text editor day-to-day. I had a nice workflow set up, utilizing multiple vim tabs and separate sessions within tmux windows, and life was pretty good.&lt;/p&gt;
&lt;p&gt;Then, in December, the challenge was set: strip vim out of my workflow for good, and find something else.&lt;/p&gt;
&lt;p&gt;Naturally, and guided by one of my coworkers, I managed to settle on what is generally considered to be the prime competitor to vim - Emacs.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#baby-steps" id="baby-steps"&gt;&lt;/a&gt;Baby Steps&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve had forays into learning Emacs before, but I&amp;rsquo;ve always shied away, after playing with some basic tooling, and forgetting how to close it more often than I care to admit. This time was different, though; I had more years of experience under my belt, and it was more about getting myself into an uncomfortable place before I gain more knowledge.&lt;/p&gt;
&lt;p&gt;My first thought was to find some type of starting guide. While the Emacs tutorial helped in terms of understanding navigation and simple editing, it didn&amp;rsquo;t really show me the true power of the environment that I had gained. A cursory google search brought me to the &lt;a href="https://github.com/technomancy/emacs-starter-kit"&gt;Emacs Starter Kit&lt;/a&gt;. This toolkit provides some default setting to get you started with the environment; I used the documentation around it to gain knowledge of things like Melpa and Marmalade, which act as Emacs Package Managers of sorts.&lt;/p&gt;
&lt;p&gt;Following my initial setup with the starter kit, I started delving into the &lt;a href="http://www.emacswiki.org/emacs/"&gt;emacs wiki&lt;/a&gt;. This became a much more handy resource to me, as it provided me with multiple provided solutions to given issues that I&amp;rsquo;ve encountered while converting my vim-based mind to a constantly-insert-enabled editor. When I&amp;rsquo;d run into an issue where I found something I&amp;rsquo;d like to do similar to vim, I&amp;rsquo;d head to the wiki to find what analogs are available. Once I&amp;rsquo;d find a package which did what I looked for, I&amp;rsquo;d test it out with an M-x pacakge-install, and incorporate it into my init.el when I felt I had it down.&lt;/p&gt;
&lt;h4&gt;&lt;a href="#evil" id="evil"&gt;&lt;/a&gt;Evil?&lt;/h4&gt;
&lt;p&gt;I had been asked while converting why I decided not to use a vi-like editor package for Emacs (like Evil or Viper). I felt that, if I were to do this, it would be skimping out on what I should be learning, and I&amp;rsquo;d get less of an understanding of Emacs because I was sticking to my old method of doing things. Thus, I opted for Emacs&amp;rsquo;s standard of editing, and no vi-emulation modes.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#post-move" id="post-move"&gt;&lt;/a&gt;Post-move&lt;/h2&gt;
&lt;p&gt;These are the things that I&amp;rsquo;ve discovered in the two months since I switched:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Split pane support. I actually like the way that Emacs splits its windows better than vim. A C-x 2 or C-x 3 is an easy way to remember it; coupled with the &amp;lsquo;workgroups2&amp;rsquo; package, configurations can be stored across sessions, too.&lt;/li&gt;
&lt;li&gt;Lisp. This has been a slow one for me, but I&amp;rsquo;m becoming more interested in learning Lisp and Lisp-like languages, like Clojure. I have a lot of work to do here, and that will be something to work on in the future.&lt;/li&gt;
&lt;li&gt;Tramp. Being able to edit files across an SSH tunnel is a fantastic feature.&lt;/li&gt;
&lt;li&gt;Buffers without files. Since the editor is meant to live on indefinitely, it&amp;rsquo;s nice to spin up a new buffer and set the mode(s) I want, and let it reside in memory for a while before saving it. If I need to, a save is close enough away, but it works wonders for when I need to take some quick notes.&lt;/li&gt;
&lt;li&gt;ERC. I no longer need a separate IRC cilent; Emacs handles it for me. This is fantastic for me at work, where we frequently use chat to talk around.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Things I wish I had from Vim:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sentence-like movement. I&amp;rsquo;ve sort of rebuilt this on my own with a combination of line-jumps (M-x goto-line) and ace-jump-mode, but being able to translate &amp;ldquo;^3wci(&amp;rdquo; into what it can do in Vim is a skill I have yet to master.&lt;/li&gt;
&lt;li&gt;Mixing modes in HTML. This was noticeably less of a problem in Vim, but I don&amp;rsquo;t know if it was due to the editor or my lack of noticing that showed just how difficult it is to switch contexts from HTML/CSS/JS all in the same file. I&amp;rsquo;ve tried doing the nXML hack and multiple modes, but those have worked to no avail.&lt;/li&gt;
&lt;li&gt;Closing the editor. True, I can leave Emacs. But, I miss popping up a new window for one file, and then leaving right after a quick edit.&lt;/li&gt;
&lt;li&gt;Workspace management. Because of the way I separated files into tabs in Vim, I knew each tab matched a different section of what I was working on (or another project entirely).  I lack this with the way that buffers are managed by default in Emacs. I&amp;rsquo;m still looking for better ways of handling this management, though - workgroups2 has been a nice start.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Things I know I still have yet to learn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;More Lisp. I&amp;rsquo;ve gotten a good start, but that&amp;rsquo;s a deep rabbit hole.&lt;/li&gt;
&lt;li&gt;Shell, email within Emacs. I used to use a lot of separate tools - now that Emacs contains most of them, I&amp;rsquo;d like to get better at handling those tasks within Emacs.&lt;/li&gt;
&lt;li&gt;Org-mode. I&amp;rsquo;ve seen my coworker pull off some crazy things with scheduling and notes within Org-mode, and I&amp;rsquo;d love to get to the point where I can do them, too.&lt;/li&gt;
&lt;li&gt;Macros and scripting. My next Pragmatic tenet is &lt;em&gt;Write Code That Writes Code&lt;/em&gt;; I think getting your editor set to facilitate your programming counts. :)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;rsquo;ll see what the next few months hold.&lt;/p&gt;
&lt;/section&gt;&lt;footer class="post-footer"&gt;&lt;section class="author"&gt;&lt;h4&gt;Christopher Kruse&lt;/h4&gt;&lt;p&gt;AWS Engineer, puzzle/board game addict, choir singer, and a teller of terrible puns.&lt;/p&gt;&lt;/section&gt;&lt;section class="share"&gt;&lt;span class="share-twitter"&gt;&lt;h4&gt;Share this post&lt;/h4&gt;&lt;a class="icon-twitter" href="https://twitter.com/share?text=&amp;amp;url=http://www.ballpointcarrot.net/posts/learning-a-new-editor.html" onclick=="window.open(this.href, &amp;apos;twitter-share&amp;apos;, &amp;apos;width=550,height=235&amp;apos;);return false;"&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Twitter&lt;/span&gt;&lt;/span&gt;&lt;span class="share-fb"&gt;&lt;a class="icon-facebook" href="https://www.facebook.com/sharer/sharer.php?u=http://www.ballpointcarrot.net/posts/learning-a-new-editor.html" onclick="window.open(this.href, &amp;apos;facebook-share&amp;apos;,&amp;apos;width=580,height=296&amp;apos;);return false;"&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Facebook&lt;/span&gt;&lt;/span&gt;&lt;span class="share-reddit"&gt;&lt;a class="icon-reddit" href="" onclick=""&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Reddit&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/footer&gt;&lt;/article&gt;&lt;/main&gt;&lt;footer class="site-footer"&gt;&lt;a class="subscribe icon-feed" href="http://www.ballpointcarrot.net/atom.xml"&gt;&lt;span class="tooltip"&gt;Subscribe!&lt;/span&gt;&lt;/a&gt;&lt;div class="inner h-card"&gt;&lt;div&gt;I'm &lt;span class="p-name"&gt;Christopher Kruse&lt;/span&gt;.&lt;/div&gt;&lt;ul class="web-identity"&gt;&lt;li&gt;&lt;a class="u-url" href="https://twitter.com/ballpointcarrot" rel="me" target="_blank"&gt;Twitter&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-url" href="https://social.ballpointcarrot.net/@ballpointcarrot" rel="me" target="_blank"&gt;Mastodon&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-url" href="https://github.com/ballpointcarrot" rel="me" target="_blank"&gt;Github&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-email" href="mailto:ckruse@ballpointcarrot.net" target="_blank"&gt;email&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="inner"&gt;&lt;section class="copyright"&gt;All content copyright &lt;a href="http://www.ballpointcarrot.net/"&gt;Ballpointcarrot.net&lt;/a&gt; &amp;copy; 2017 &amp;bull; All rights reserved.&lt;/section&gt;&lt;/div&gt;&lt;/footer&gt;&lt;script src="/assets/js/index.js" type="text/javascript"&gt;&lt;/script&gt;&lt;script src="/assets/js/prism.js" type="text/javascript"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>Christopher Kruse</name><email>ckruse@ballpointcarrot.net</email></author><category term="Programming"></category></entry><entry><id>urn:uuid:23af2de1-1575-4ee9-a1e9-0240c1b1b170</id><title>Well, I should've been paying attention</title><link href="http://www.ballpointcarrot.net/posts/well-i-shouldve-been.html" type="text/html" title="Well, I should've been paying attention" rel="alternate"></link><published>2013-08-19T00:00:00Z</published><updated>2013-08-19T00:00:00Z</updated><content type="html" xml:base="http://www.ballpointcarrot.net/posts/well-i-shouldve-been.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0" name="viewport"&gt;&lt;meta content="Thoughts and ramblings of Christopher Kruse, a software engineer based in Seattle, WA." name="description"&gt;&lt;link href="/assets/css/screen.css" rel="stylesheet" type="text/css"&gt;&lt;link href="//fonts.googleapis.com/css?family=Noto+Serif:400,700,400italic%7COpen+Sans:700,400" rel="stylesheet" type="text/css"&gt;&lt;link href="/assets/css/prism.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;body class="post-template"&gt;&lt;main class="content" role="main"&gt;&lt;header class="post-header"&gt;&lt;a class="blog-logo" href="http://www.ballpointcarrot.net/"&gt;&lt;span class="blog-title"&gt;Ballpointcarrot.net&lt;/span&gt;&lt;/a&gt;&lt;/header&gt;&lt;article class="post h-entry"&gt;&lt;span class="post-meta"&gt;&lt;time class="dt-published" datetime="Sun, 18 Aug 2013"&gt;&lt;a href="http://www.ballpointcarrot.net/posts/well-i-shouldve-been.html"&gt;Sun, 18 Aug 2013&lt;/a&gt;&lt;/time&gt;&lt;div class="tags"&gt;&lt;a class="p-category" href="/tags/Metablog.html" style="padding: 0 0.5rem 0 0;"&gt;Metablog&lt;/a&gt;&lt;/div&gt;&lt;/span&gt;&lt;h1 class="post-title p-name"&gt;Well, I should've been paying attention&lt;/h1&gt;&lt;section class="post-content e-content"&gt;&lt;p&gt;So, I guess on 30 April 2013, Posterous Spaces was shuttered. You should see &lt;a href="http://www.posterous.com"&gt;what&amp;rsquo;s there now&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then, a full three months later, someone tells me that ballpointcarrot.net isn&amp;rsquo;t functioning. I figure, &amp;ldquo;I can check it when I find some time. It&amp;rsquo;s been busy.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Cue almost a &lt;em&gt;month&lt;/em&gt; after that, and I find that Posterous is gone (as is the content on the old blog). Now, I&amp;rsquo;m working to rebuild and reset different platforms/ideas that can both provide me CNAME linking to &lt;a href="http://blog.ballpointcarrot.net"&gt;blog.ballpointcarrot.net&lt;/a&gt;, and I ran across Github Pages and Octopress. I&amp;rsquo;m gonna give it a try for a while, and see what happens.&lt;/p&gt;
&lt;p&gt;Meanwhile, the main ballpointcarrot site has to go through a redesign, as the automatic feed parsing thing has broken enough times that it&amp;rsquo;s time to replace it. Expect a new look (but the same old logo) sometime when I find some more time again - so November, maybe. :S&lt;/p&gt;
&lt;/section&gt;&lt;footer class="post-footer"&gt;&lt;section class="author"&gt;&lt;h4&gt;Christopher Kruse&lt;/h4&gt;&lt;p&gt;AWS Engineer, puzzle/board game addict, choir singer, and a teller of terrible puns.&lt;/p&gt;&lt;/section&gt;&lt;section class="share"&gt;&lt;span class="share-twitter"&gt;&lt;h4&gt;Share this post&lt;/h4&gt;&lt;a class="icon-twitter" href="https://twitter.com/share?text=&amp;amp;url=http://www.ballpointcarrot.net/posts/well-i-shouldve-been.html" onclick=="window.open(this.href, &amp;apos;twitter-share&amp;apos;, &amp;apos;width=550,height=235&amp;apos;);return false;"&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Twitter&lt;/span&gt;&lt;/span&gt;&lt;span class="share-fb"&gt;&lt;a class="icon-facebook" href="https://www.facebook.com/sharer/sharer.php?u=http://www.ballpointcarrot.net/posts/well-i-shouldve-been.html" onclick="window.open(this.href, &amp;apos;facebook-share&amp;apos;,&amp;apos;width=580,height=296&amp;apos;);return false;"&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Facebook&lt;/span&gt;&lt;/span&gt;&lt;span class="share-reddit"&gt;&lt;a class="icon-reddit" href="" onclick=""&gt;&lt;/a&gt;&lt;span class="hidden"&gt;Reddit&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/footer&gt;&lt;/article&gt;&lt;/main&gt;&lt;footer class="site-footer"&gt;&lt;a class="subscribe icon-feed" href="http://www.ballpointcarrot.net/atom.xml"&gt;&lt;span class="tooltip"&gt;Subscribe!&lt;/span&gt;&lt;/a&gt;&lt;div class="inner h-card"&gt;&lt;div&gt;I'm &lt;span class="p-name"&gt;Christopher Kruse&lt;/span&gt;.&lt;/div&gt;&lt;ul class="web-identity"&gt;&lt;li&gt;&lt;a class="u-url" href="https://twitter.com/ballpointcarrot" rel="me" target="_blank"&gt;Twitter&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-url" href="https://social.ballpointcarrot.net/@ballpointcarrot" rel="me" target="_blank"&gt;Mastodon&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-url" href="https://github.com/ballpointcarrot" rel="me" target="_blank"&gt;Github&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="u-email" href="mailto:ckruse@ballpointcarrot.net" target="_blank"&gt;email&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="inner"&gt;&lt;section class="copyright"&gt;All content copyright &lt;a href="http://www.ballpointcarrot.net/"&gt;Ballpointcarrot.net&lt;/a&gt; &amp;copy; 2017 &amp;bull; All rights reserved.&lt;/section&gt;&lt;/div&gt;&lt;/footer&gt;&lt;script src="/assets/js/index.js" type="text/javascript"&gt;&lt;/script&gt;&lt;script src="/assets/js/prism.js" type="text/javascript"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>Christopher Kruse</name><email>ckruse@ballpointcarrot.net</email></author><category term="Metablog"></category></entry></feed>
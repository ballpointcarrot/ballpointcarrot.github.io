<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ballpointcarrot.net]]></title>
  <link href="http://www.ballpointcarrot.net/atom.xml" rel="self"/>
  <link href="http://www.ballpointcarrot.net/"/>
  <updated>2014-05-23T22:55:54-07:00</updated>
  <id>http://www.ballpointcarrot.net/</id>
  <author>
    <name><![CDATA[Christopher Kruse]]></name>
    <email><![CDATA[ckruse@ballpointcarrot.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tooling Around]]></title>
    <link href="http://www.ballpointcarrot.net/blog/2014/05/23/tooling-around/"/>
    <updated>2014-05-23T21:43:00-07:00</updated>
    <id>http://www.ballpointcarrot.net/blog/2014/05/23/tooling-around</id>
    <content type="html"><![CDATA[<p>So, I traded in my work laptop today to replace it with a new one. I&rsquo;m glad I made the switch, as there were things that
I didn&rsquo;t need on the old one, and I didn&rsquo;t want to have to mess with a major upgrade path and the inevitable breaks that
were to come with it. Additionally, my workflow and suite of tools works better with the new hardware (I&rsquo;ve switched to
an Ubuntu laptop from an OSX one), and it will centralize my daily work (email and communication, scheduling and
planning) around the laptop instead of the desktop, which can then be devoted to other tasks (like running development
projects).</p>

<p>Because of the switch, it got me to thinking about the tooling that I use on a daily basis, and how to most smoothly
move into getting that installed on a new system. Replacing hardware is tough work for a developer/engineer, and that
would be time otherwise spent working on problems or creating new things. I&rsquo;m going to provide a rundown of my toolchain
and how I orchestrate the installation of the tools.</p>

<p>Note that, as this is tied to Linux, the tools will obviously be Linux-based. There are different flows for other OSs;
each ecosystem operates differently. This is my solution for myself; YMMV.</p>

<h2>Communication</h2>

<p>Being able to send and receive messages is key. Ten minutes after receiving my laptop today, I had a meeting that I had
to run to, and to send an email containing some details to one of the attendees. I run my email from the office Exchange server to my desktop (and now the laptop) using
<a href="http://fetchmail.berlios.de/">fetchmail</a> and <a href="http://www.procmail.org/">procmail</a>. While these may seem esoteric, and
not terribly user-friendly, it gives me a strength that no other email client has &ndash; I can run scripts around my
email. Procmail handles the filtering of the incoming fetchmail setup, and separates the email into the various folders
for easy filtering rules (based on sender, topic in subject, etc.). Emails sent specifically to me in the To: header get
a bit more prevalence, and emails with calendar invites as attachments get the attachment parsed and sent to a
calendar. Since everything was using a standard Maildir format for storage on the laptop, migrating the email was as
easy as running rsync between the two systems.</p>

<p>This covers only the receipt of email, not sending. Since December (referencing
<a href="http://www.ballpointcarrot.net/blog/2014/02/07/learning-a-new-editor/">an earlier post</a>), I&rsquo;ve been using Emacs to do
more and more things &ndash; this has grown to include IRC chat (via the <a href="http://www.emacswiki.org/wiki/ERC">ERC</a> plugin) and
email (using a pair of utilities called <a href="http://www.djcbsoftware.nl/code/mu/mu4e.html">mu and mu4e</a>). While normally I&rsquo;d
entertain jokes here (like &ldquo;emacs is a good OS, it just needs a decent text editor.&rdquo;), I have to say that it&rsquo;s handy to
have a single place to go for all the work you need to do. mu is external to Emacs, and is a search engine over your
Maildir folders; you can use it on the command line to pick out emails that pertain to certain topics, and filter them
by specific recipients and whether they&rsquo;re new/flagged/unread/etc. Mu4e wraps that logic in an easy to use mail client
from within Emacs, and it&rsquo;s been much nicer than sifting through Outlook.</p>

<h2>Environment</h2>

<p>So I&rsquo;ve got some software&hellip; now I have to customize what I run it in. Rather than stay with Unity (the default Ubuntu
installed WM, which I frankly feel is counter-intuitive), I choose to go to a lesser known window manager called
<a href="http://awesome.naquadah.org/">&ldquo;Awesome.&rdquo;</a> Appropriately named, as I haven&rsquo;t left it since I found it. By using a tiling
window manager, I don&rsquo;t have to worry about resizing things to fit. Additionally, the entire interface is programmable
via Lua, so defining custom shortcut keys and startup programs is fairly simple:</p>

<figure class='code'><figcaption><span>rc.lua snippet</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="c1">-- Hotkeys for handling window resizing and management:</span>
</span><span class='line'><span class="n">clientkeys</span> <span class="o">=</span> <span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">table</span><span class="p">.</span><span class="n">join</span><span class="p">(</span>
</span><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">&quot;</span><span class="s">f&quot;</span><span class="p">,</span>      <span class="k">function</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="n">c</span><span class="p">.</span><span class="n">fullscreen</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">c</span><span class="p">.</span><span class="n">fullscreen</span>  <span class="k">end</span><span class="p">),</span>
</span><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">&quot;</span><span class="s">q&quot;</span><span class="p">,</span>      <span class="k">function</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="n">c</span><span class="p">:</span><span class="n">kill</span><span class="p">()</span>                         <span class="k">end</span><span class="p">),</span>
</span><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">Control&quot;</span> <span class="p">},</span> <span class="s2">&quot;</span><span class="s">space&quot;</span><span class="p">,</span>  <span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">floating</span><span class="p">.</span><span class="n">toggle</span>                     <span class="p">),</span>
</span><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">Control&quot;</span> <span class="p">},</span> <span class="s2">&quot;</span><span class="s">Return&quot;</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="n">c</span><span class="p">:</span><span class="n">swap</span><span class="p">(</span><span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">getmaster</span><span class="p">())</span> <span class="k">end</span><span class="p">),</span>
</span><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">&quot;</span><span class="s">o&quot;</span><span class="p">,</span>      <span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">movetoscreen</span>                        <span class="p">),</span>
</span><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">Shift&quot;</span>   <span class="p">},</span> <span class="s2">&quot;</span><span class="s">r&quot;</span><span class="p">,</span>      <span class="k">function</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="n">c</span><span class="p">:</span><span class="n">redraw</span><span class="p">()</span>                       <span class="k">end</span><span class="p">),</span>
</span><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">&quot;</span><span class="s">t&quot;</span><span class="p">,</span>      <span class="k">function</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="n">c</span><span class="p">.</span><span class="n">ontop</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">c</span><span class="p">.</span><span class="n">ontop</span>            <span class="k">end</span><span class="p">),</span>
</span><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">&quot;</span><span class="s">n&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>        <span class="c1">-- The client currently has the input focus, so it cannot be</span>
</span><span class='line'>        <span class="c1">-- minimized, since minimized clients can&#39;t have the focus.</span>
</span><span class='line'>        <span class="n">c</span><span class="p">.</span><span class="n">minimized</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>    <span class="k">end</span><span class="p">),</span>
</span><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">&quot;</span><span class="s">m&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>        <span class="n">c</span><span class="p">.</span><span class="n">maximized_horizontal</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">c</span><span class="p">.</span><span class="n">maximized_horizontal</span>
</span><span class='line'>        <span class="n">c</span><span class="p">.</span><span class="n">maximized_vertical</span>   <span class="o">=</span> <span class="ow">not</span> <span class="n">c</span><span class="p">.</span><span class="n">maximized_vertical</span>
</span><span class='line'>    <span class="k">end</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="c1">-- Autostarts</span>
</span><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">spawn_with_shell</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">/usr/bin/startup-script.sh&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">spawn_with_shell</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">~/bin/runme&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome&rsquo;s libraries have amusing names: &ldquo;awful&rdquo;, &ldquo;naughty&rdquo;, and &ldquo;vicious&rdquo;, to name a few. Currently, I have this
attached to the GNOME session layer, so I get the benefit of GNOME&rsquo;s background and icon management, but the window
management of awesome.</p>

<h2>Code</h2>

<p>A programmer can&rsquo;t do much unless he has languages to write in. For me, that means having to add some additional
packages:</p>

<ul>
<li><p><a href="https://github.com/sstephenson/rbenv">rbenv</a> &ndash; this manages various installations of Ruby and the ecosystem around
 it. Similar to RVM, this uses shim binaries to point to rotating Ruby versions, so that I can use one version with
 one app, and use a legacy version to work on an older one.</p></li>
<li><p><a href="https://github.com/creationix/nvm">nvm</a> &ndash; Same idea as rbenv, but for node.js. These libraries give me the
 flexibility of using different runtimes for different applications, and makes it easier to install the languages than
 with the system-provided binaries (which can either be out of date or harder to manage).</p></li>
<li><p>I&rsquo;ve already mentioned it, but Emacs is in here, too. Being able to easily see language and typographical issues with
 flycheck, syntax highlighting for languages available via <a href="https://github.com/dimitri/el-get">el-get</a>, and being able
 to launch a simple shell within the editor to run a test is a blessing to getting things done.</p></li>
</ul>


<h2>Tomorrow</h2>

<p>This was just for the first day, too. Things like browser plugins (which we use a myriad of for work) will likely come
soon enough, and there will be tweaks to all of the stuff listed as what I need in the environment changes. Let me know
if you have any questions on any of this, and I&rsquo;ll do what I can to answer them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redesign, and Goals]]></title>
    <link href="http://www.ballpointcarrot.net/blog/2014/05/21/redesign-and-goals/"/>
    <updated>2014-05-21T21:45:00-07:00</updated>
    <id>http://www.ballpointcarrot.net/blog/2014/05/21/redesign-and-goals</id>
    <content type="html"><![CDATA[<h2>New Site Layout!</h2>

<p>Hey everyone! After taking time to look through and see what it would take to maintain the old ballpointcarrot.net site (residing on a mostly-dormant 1-dyno Heroku install), I&rsquo;ve decided to forgo it and run everything on Octopress. Let me know if you have positives/negatives to say about the changes. I feel it&rsquo;s a positive step, and it&rsquo;s one less account to keep open for me. Bonus.</p>

<h2>Goals</h2>

<p>I realize I don&rsquo;t post much on here, so I want to set a goal for myself for new blog posts. So, starting today, until the end of June, I&rsquo;ll strive to make a post every 2 days. You should expect to see something Friday. This will allow me to get some of my mind dumped out to the Internet, and expose my thinking to approaches for software. It will also give me time to put down things I&rsquo;ve learned while working at AWS &ndash; expect a lot of the posts to be covering issues with CloudFormation, Elastic Beanstalk, Auto Scaling and more. Plus, I&rsquo;ll probably have some talk on new JS frameworks, Docker, Ruby gotchas, and anything else I can think of.</p>

<p>I still should be pretty reachable via the site &ndash; the sidebar for posts has my G+, Twitter and email nearby to click on. I&rsquo;ve also added Disqus comments below, so let me know what you think of the new layout, and my future content.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning a new Editor]]></title>
    <link href="http://www.ballpointcarrot.net/blog/2014/02/07/learning-a-new-editor/"/>
    <updated>2014-02-07T22:03:00-08:00</updated>
    <id>http://www.ballpointcarrot.net/blog/2014/02/07/learning-a-new-editor</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>I often fall back to my (now well-worn) copy of <a href="http://pragprog.com/book/tpp/the-pragmatic-programmer">The Pragmatic Programmer</a> to take a look at things I can do to hone my abilities as a programmer. Recently, the two rules that have most recently hit me as things I haven&rsquo;t put much focus on are <em>Invest Regularly in Your Knowledge Portfolio</em>, and <em>There Are No Final Decisions</em>. In a fit of Christmas downime enegry, I decided to incorporate these principles by taking myself out of my normal comfort zone, and cutting out one of my most widely used tools &ndash; vim.</p>

<p>I&rsquo;ve been a vimmer for many years, and I&rsquo;ve incorporated utilities passed down from greater minds than I (Tim Pope, the guys at Pivotal, etc.) and had become comfortable in how I used my text editor day-to-day. I had a nice workflow set up, utilizing multiple vim tabs and separate sessions within tmux windows, and life was pretty good.</p>

<p>Then, in December, the challenge was set: strip vim out of my workflow for good, and find something else.</p>

<p>Naturally, and guided by one of my coworkers, I managed to settle on what is generally considered to be the prime competitor to vim &ndash; Emacs.</p>

<h2>Baby Steps</h2>

<p>I&rsquo;ve had forays into learning Emacs before, but I&rsquo;ve always shied away, after playing with some basic tooling, and forgetting how to close it more often than I care to admit. This time was different, though; I had more years of experience under my belt, and it was more about getting myself into an uncomfortable place before I gain more knowledge.</p>

<p>My first thought was to find some type of starting guide. While the Emacs tutorial helped in terms of understanding navigation and simple editing, it didn&rsquo;t really show me the true power of the environment that I had gained. A cursory google search brought me to the <a href="https://github.com/technomancy/emacs-starter-kit">Emacs Starter Kit</a>. This toolkit provides some default setting to get you started with the environment; I used the documentation around it to gain knowledge of things like Melpa and Marmalade, which act as Emacs Package Managers of sorts.</p>

<p>Following my initial setup with the starter kit, I started delving into the <a href="http://www.emacswiki.org/emacs/">emacs wiki</a>. This became a much more handy resource to me, as it provided me with multiple provided solutions to given issues that I&rsquo;ve encountered while converting my vim-based mind to a constantly-insert-enabled editor. When I&rsquo;d run into an issue where I found something I&rsquo;d like to do similar to vim, I&rsquo;d head to the wiki to find what analogs are available. Once I&rsquo;d find a package which did what I looked for, I&rsquo;d test it out with an M-x pacakge-install, and incorporate it into my init.el when I felt I had it down.</p>

<h4>Evil?</h4>

<p>I had been asked while converting why I decided not to use a vi-like editor package for Emacs (like Evil or Viper). I felt that, if I were to do this, it would be skimping out on what I should be learning, and I&rsquo;d get less of an understanding of Emacs because I was sticking to my old method of doing things. Thus, I opted for Emacs&rsquo;s standard of editing, and no vi-emulation modes.</p>

<h2>Post-move</h2>

<p>These are the things that I&rsquo;ve discovered in the two months since I switched:</p>

<ul>
<li>Split pane support. I actually like the way that Emacs splits its windows better than vim. A C-x 2 or C-x 3 is an easy way to remember it; coupled with the &lsquo;workgroups2&rsquo; package, configurations can be stored across sessions, too.</li>
<li>Lisp. This has been a slow one for me, but I&rsquo;m becoming more interested in learning Lisp and Lisp-like languages, like Clojure. I have a lot of work to do here, and that will be something to work on in the future.</li>
<li>Tramp. Being able to edit files across an SSH tunnel is a fantastic feature.</li>
<li>Buffers without files. Since the editor is meant to live on indefinitely, it&rsquo;s nice to spin up a new buffer and set the mode(s) I want, and let it reside in memory for a while before saving it. If I need to, a save is close enough away, but it works wonders for when I need to take some quick notes.</li>
<li>ERC. I no longer need a separate IRC cilent; Emacs handles it for me. This is fantastic for me at work, where we frequently use chat to talk around.</li>
</ul>


<p>Things I wish I had from Vim:</p>

<ul>
<li>Sentence-like movement. I&rsquo;ve sort of rebuilt this on my own with a combination of line-jumps (M-x goto-line) and ace-jump-mode, but being able to translate &ldquo;^3wci(&rdquo; into what it can do in Vim is a skill I have yet to master.</li>
<li>Mixing modes in HTML. This was noticeably less of a problem in Vim, but I don&rsquo;t know if it was due to the editor or my lack of noticing that showed just how difficult it is to switch contexts from HTML/CSS/JS all in the same file. I&rsquo;ve tried doing the nXML hack and multiple modes, but those have worked to no avail.</li>
<li>Closing the editor. True, I can leave Emacs. But, I miss popping up a new window for one file, and then leaving right after a quick edit.</li>
<li>Workspace management. Because of the way I separated files into tabs in Vim, I knew each tab matched a different section of what I was working on (or another project entirely).  I lack this with the way that buffers are managed by default in Emacs. I&rsquo;m still looking for better ways of handling this management, though &ndash; workgroups2 has been a nice start.</li>
</ul>


<p>Things I know I still have yet to learn:</p>

<ul>
<li>More Lisp. I&rsquo;ve gotten a good start, but that&rsquo;s a deep rabbit hole.</li>
<li>Shell, email within Emacs. I used to use a lot of separate tools &ndash; now that Emacs contains most of them, I&rsquo;d like to get better at handling those tasks within Emacs.</li>
<li>Org-mode. I&rsquo;ve seen my coworker pull off some crazy things with scheduling and notes within Org-mode, and I&rsquo;d love to get to the point where I can do them, too.</li>
<li>Macros and scripting. My next Pragmatic tenet is <em>Write Code That Writes Code</em>; I think getting your editor set to facilitate your programming counts. :)</li>
</ul>


<p>We&rsquo;ll see what the next few months hold.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Well, I should've been paying attention.]]></title>
    <link href="http://www.ballpointcarrot.net/blog/2013/08/19/well/"/>
    <updated>2013-08-19T11:42:00-07:00</updated>
    <id>http://www.ballpointcarrot.net/blog/2013/08/19/well</id>
    <content type="html"><![CDATA[<p>So, I guess on 30 April 2013, Posterous Spaces was shuttered. You should see <a href="http://www.posterous.com">what&rsquo;s there now</a>.</p>

<p>Then, a full three months later, someone tells me that ballpointcarrot.net isn&rsquo;t functioning.
I figure, &ldquo;I can check it when I find some time. It&rsquo;s been busy.&rdquo;</p>

<p>Cue almost a <em>month</em> after that, and I find that Posterous is gone (as is the content on the old blog).
Now, I&rsquo;m working to rebuild and reset different platforms/ideas that can both provide me CNAME linking
to <a href="http://blog.ballpointcarrot.net">blog.ballpointcarrot.net</a>, and I ran across Github Pages and Octopress.
I&rsquo;m gonna give it a try for a while, and see what happens.</p>

<p>Meanwhile, the main ballpointcarrot site has to go through a redesign, as the automatic feed parsing thing has
broken enough times that it&rsquo;s time to replace it. Expect a new look (but the same old logo) sometime when I find
some more time again &ndash; so November, maybe. :S</p>
]]></content>
  </entry>
  
</feed>
